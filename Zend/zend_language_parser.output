Terminals unused in grammar

   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"
   T_ERROR


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 reserved_non_modifiers: "include (T_INCLUDE)"
    3                       | "include_once (T_INCLUDE_ONCE)"
    4                       | "eval (T_EVAL)"
    5                       | "require (T_REQUIRE)"
    6                       | "require_once (T_REQUIRE_ONCE)"
    7                       | "or (T_LOGICAL_OR)"
    8                       | "xor (T_LOGICAL_XOR)"
    9                       | "and (T_LOGICAL_AND)"
   10                       | "instanceof (T_INSTANCEOF)"
   11                       | "new (T_NEW)"
   12                       | "clone (T_CLONE)"
   13                       | "exit (T_EXIT)"
   14                       | "if (T_IF)"
   15                       | "elseif (T_ELSEIF)"
   16                       | "else (T_ELSE)"
   17                       | "endif (T_ENDIF)"
   18                       | "echo (T_ECHO)"
   19                       | "do (T_DO)"
   20                       | "while (T_WHILE)"
   21                       | "endwhile (T_ENDWHILE)"
   22                       | "for (T_FOR)"
   23                       | "endfor (T_ENDFOR)"
   24                       | "foreach (T_FOREACH)"
   25                       | "endforeach (T_ENDFOREACH)"
   26                       | "declare (T_DECLARE)"
   27                       | "enddeclare (T_ENDDECLARE)"
   28                       | "as (T_AS)"
   29                       | "try (T_TRY)"
   30                       | "catch (T_CATCH)"
   31                       | "finally (T_FINALLY)"
   32                       | "throw (T_THROW)"
   33                       | "use (T_USE)"
   34                       | "insteadof (T_INSTEADOF)"
   35                       | "global (T_GLOBAL)"
   36                       | "var (T_VAR)"
   37                       | "unset (T_UNSET)"
   38                       | "isset (T_ISSET)"
   39                       | "empty (T_EMPTY)"
   40                       | "continue (T_CONTINUE)"
   41                       | "goto (T_GOTO)"
   42                       | "function (T_FUNCTION)"
   43                       | "const (T_CONST)"
   44                       | "return (T_RETURN)"
   45                       | "print (T_PRINT)"
   46                       | "yield (T_YIELD)"
   47                       | "list (T_LIST)"
   48                       | "switch (T_SWITCH)"
   49                       | "endswitch (T_ENDSWITCH)"
   50                       | "case (T_CASE)"
   51                       | "default (T_DEFAULT)"
   52                       | "break (T_BREAK)"
   53                       | "array (T_ARRAY)"
   54                       | "callable (T_CALLABLE)"
   55                       | "extends (T_EXTENDS)"
   56                       | "implements (T_IMPLEMENTS)"
   57                       | "namespace (T_NAMESPACE)"
   58                       | "trait (T_TRAIT)"
   59                       | "interface (T_INTERFACE)"
   60                       | "class (T_CLASS)"

   61 semi_reserved: reserved_non_modifiers
   62              | "static (T_STATIC)"
   63              | "abstract (T_ABSTRACT)"
   64              | "final (T_FINAL)"
   65              | "private (T_PRIVATE)"
   66              | "protected (T_PROTECTED)"
   67              | "public (T_PUBLIC)"

   68 identifier: "identifier (T_STRING)"
   69           | semi_reserved

   70 top_statement_list: top_statement_list top_statement
   71                   | %empty

   72 namespace_name: "identifier (T_STRING)"
   73               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

   74 name: namespace_name
   75     | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
   76     | "\\ (T_NS_SEPARATOR)" namespace_name

   77 top_statement: statement
   78              | function_declaration_statement
   79              | class_declaration_statement
   80              | trait_declaration_statement
   81              | interface_declaration_statement
   82              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   83              | "namespace (T_NAMESPACE)" namespace_name ';'

   84 $@1: %empty

   85 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' top_statement_list '}'

   86 $@2: %empty

   87 top_statement: "namespace (T_NAMESPACE)" $@2 '{' top_statement_list '}'
   88              | "use (T_USE)" mixed_group_use_declaration ';'
   89              | "use (T_USE)" use_type group_use_declaration ';'
   90              | "use (T_USE)" use_declarations ';'
   91              | "use (T_USE)" use_type use_declarations ';'
   92              | "const (T_CONST)" const_list ';'

   93 use_type: "function (T_FUNCTION)"
   94         | "const (T_CONST)"

   95 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' use_declarations '}'

   96 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}'

   97 inline_use_declarations: inline_use_declarations ',' inline_use_declaration
   98                        | inline_use_declaration

   99 inline_use_declaration: use_declaration
  100                       | use_type use_declaration

  101 use_declarations: use_declarations ',' use_declaration
  102                 | use_declaration

  103 use_declaration: namespace_name
  104                | namespace_name "as (T_AS)" "identifier (T_STRING)"
  105                | "\\ (T_NS_SEPARATOR)" namespace_name
  106                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

  107 const_list: const_list ',' const_decl
  108           | const_decl

  109 inner_statement_list: inner_statement_list inner_statement
  110                     | %empty

  111 inner_statement: statement
  112                | function_declaration_statement
  113                | class_declaration_statement
  114                | trait_declaration_statement
  115                | interface_declaration_statement
  116                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

  117 statement: '{' inner_statement_list '}'
  118          | if_stmt
  119          | alt_if_stmt
  120          | "while (T_WHILE)" '(' expr ')' while_statement
  121          | "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' ';'
  122          | "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement
  123          | "switch (T_SWITCH)" '(' expr ')' switch_case_list
  124          | "break (T_BREAK)" optional_expr ';'
  125          | "continue (T_CONTINUE)" optional_expr ';'
  126          | "return (T_RETURN)" optional_expr ';'
  127          | "global (T_GLOBAL)" global_var_list ';'
  128          | "static (T_STATIC)" static_var_list ';'
  129          | "echo (T_ECHO)" echo_expr_list ';'
  130          | T_INLINE_HTML
  131          | expr ';'
  132          | "unset (T_UNSET)" '(' unset_variables ')' ';'
  133          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable ')' foreach_statement
  134          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

  135 $@3: %empty

  136 statement: "declare (T_DECLARE)" '(' const_list ')' $@3 declare_statement
  137          | ';'
  138          | "try (T_TRY)" '{' inner_statement_list '}' catch_list finally_statement
  139          | "throw (T_THROW)" expr ';'
  140          | "goto (T_GOTO)" "identifier (T_STRING)" ';'
  141          | "identifier (T_STRING)" ':'

  142 catch_list: %empty
  143           | catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

  144 finally_statement: %empty
  145                  | "finally (T_FINALLY)" '{' inner_statement_list '}'

  146 unset_variables: unset_variable
  147                | unset_variables ',' unset_variable

  148 unset_variable: variable

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'

  150 is_reference: %empty
  151             | '&'

  152 is_variadic: %empty
  153            | "... (T_ELLIPSIS)"

  154 @4: %empty

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

  156 @5: %empty

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

  158 class_modifiers: class_modifier
  159                | class_modifiers class_modifier

  160 class_modifier: "abstract (T_ABSTRACT)"
  161               | "final (T_FINAL)"

  162 @6: %empty

  163 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}'

  164 @7: %empty

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}'

  166 extends_from: %empty
  167             | "extends (T_EXTENDS)" name

  168 interface_extends_list: %empty
  169                       | "extends (T_EXTENDS)" name_list

  170 implements_list: %empty
  171                | "implements (T_IMPLEMENTS)" name_list

  172 foreach_variable: variable
  173                 | '&' variable
  174                 | "list (T_LIST)" '(' assignment_list ')'

  175 for_statement: statement
  176              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  177 foreach_statement: statement
  178                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  179 declare_statement: statement
  180                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  181 switch_case_list: '{' case_list '}'
  182                 | '{' ';' case_list '}'
  183                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  184                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  185 case_list: %empty
  186          | case_list "case (T_CASE)" expr case_separator inner_statement_list
  187          | case_list "default (T_DEFAULT)" case_separator inner_statement_list

  188 case_separator: ':'
  189               | ';'

  190 while_statement: statement
  191                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  192 if_stmt_without_else: "if (T_IF)" '(' expr ')' statement
  193                     | if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' statement

  194 if_stmt: if_stmt_without_else
  195        | if_stmt_without_else "else (T_ELSE)" statement

  196 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' ':' inner_statement_list
  197                         | alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list

  198 alt_if_stmt: alt_if_stmt_without_else "endif (T_ENDIF)" ';'
  199            | alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" ';'

  200 parameter_list: non_empty_parameter_list
  201               | %empty

  202 non_empty_parameter_list: parameter
  203                         | non_empty_parameter_list ',' parameter

  204 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)"
  205          | optional_type is_reference is_variadic "variable (T_VARIABLE)" '=' expr

  206 optional_type: %empty
  207              | type

  208 type: "array (T_ARRAY)"
  209     | "callable (T_CALLABLE)"
  210     | name

  211 return_type: %empty
  212            | ':' type

  213 argument_list: '(' ')'
  214              | '(' non_empty_argument_list ')'

  215 non_empty_argument_list: argument
  216                        | non_empty_argument_list ',' argument

  217 argument: expr
  218         | "... (T_ELLIPSIS)" expr

  219 global_var_list: global_var_list ',' global_var
  220                | global_var

  221 global_var: simple_variable

  222 static_var_list: static_var_list ',' static_var
  223                | static_var

  224 static_var: "variable (T_VARIABLE)"
  225           | "variable (T_VARIABLE)" '=' expr

  226 class_statement_list: class_statement_list class_statement
  227                     | %empty

  228 class_statement: variable_modifiers property_list ';'
  229                | "const (T_CONST)" class_const_list ';'
  230                | "use (T_USE)" name_list trait_adaptations
  231                | method_modifiers function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body

  232 name_list: name
  233          | name_list ',' name

  234 trait_adaptations: ';'
  235                  | '{' '}'
  236                  | '{' trait_adaptation_list '}'

  237 trait_adaptation_list: trait_adaptation
  238                      | trait_adaptation_list trait_adaptation

  239 trait_adaptation: trait_precedence ';'
  240                 | trait_alias ';'

  241 trait_precedence: absolute_trait_method_reference "insteadof (T_INSTEADOF)" name_list

  242 trait_alias: trait_method_reference "as (T_AS)" "identifier (T_STRING)"
  243            | trait_method_reference "as (T_AS)" reserved_non_modifiers
  244            | trait_method_reference "as (T_AS)" member_modifier identifier
  245            | trait_method_reference "as (T_AS)" member_modifier

  246 trait_method_reference: identifier
  247                       | absolute_trait_method_reference

  248 absolute_trait_method_reference: name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier

  249 method_body: ';'
  250            | '{' inner_statement_list '}'

  251 variable_modifiers: non_empty_member_modifiers
  252                   | "var (T_VAR)"

  253 method_modifiers: %empty
  254                 | non_empty_member_modifiers

  255 non_empty_member_modifiers: member_modifier
  256                           | non_empty_member_modifiers member_modifier

  257 member_modifier: "public (T_PUBLIC)"
  258                | "protected (T_PROTECTED)"
  259                | "private (T_PRIVATE)"
  260                | "static (T_STATIC)"
  261                | "abstract (T_ABSTRACT)"
  262                | "final (T_FINAL)"

  263 property_list: property_list ',' property
  264              | property

  265 property: "variable (T_VARIABLE)"
  266         | "variable (T_VARIABLE)" '=' expr

  267 class_const_list: class_const_list ',' class_const_decl
  268                 | class_const_decl

  269 class_const_decl: identifier '=' expr

  270 const_decl: "identifier (T_STRING)" '=' expr

  271 echo_expr_list: echo_expr_list ',' echo_expr
  272               | echo_expr

  273 echo_expr: expr

  274 for_exprs: %empty
  275          | non_empty_for_exprs

  276 non_empty_for_exprs: non_empty_for_exprs ',' expr
  277                    | expr

  278 @8: %empty

  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}'

  280 new_expr: "new (T_NEW)" class_name_reference ctor_arguments
  281         | "new (T_NEW)" anonymous_class

  282 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' expr
  283                      | variable '=' expr
  284                      | variable '=' '&' variable
  285                      | "clone (T_CLONE)" expr
  286                      | variable "+= (T_PLUS_EQUAL)" expr
  287                      | variable "-= (T_MINUS_EQUAL)" expr
  288                      | variable "*= (T_MUL_EQUAL)" expr
  289                      | variable "**= (T_POW_EQUAL)" expr
  290                      | variable "/= (T_DIV_EQUAL)" expr
  291                      | variable ".= (T_CONCAT_EQUAL)" expr
  292                      | variable "%= (T_MOD_EQUAL)" expr
  293                      | variable "&= (T_AND_EQUAL)" expr
  294                      | variable "|= (T_OR_EQUAL)" expr
  295                      | variable "^= (T_XOR_EQUAL)" expr
  296                      | variable "<<= (T_SL_EQUAL)" expr
  297                      | variable ">>= (T_SR_EQUAL)" expr
  298                      | variable "++ (T_INC)"
  299                      | "++ (T_INC)" variable
  300                      | variable "-- (T_DEC)"
  301                      | "-- (T_DEC)" variable
  302                      | expr "|| (T_BOOLEAN_OR)" expr
  303                      | expr "&& (T_BOOLEAN_AND)" expr
  304                      | expr "or (T_LOGICAL_OR)" expr
  305                      | expr "and (T_LOGICAL_AND)" expr
  306                      | expr "xor (T_LOGICAL_XOR)" expr
  307                      | expr '|' expr
  308                      | expr '&' expr
  309                      | expr '^' expr
  310                      | expr '.' expr
  311                      | expr '+' expr
  312                      | expr '-' expr
  313                      | expr '*' expr
  314                      | expr "** (T_POW)" expr
  315                      | expr '/' expr
  316                      | expr '%' expr
  317                      | expr "<< (T_SL)" expr
  318                      | expr ">> (T_SR)" expr
  319                      | '+' expr
  320                      | '-' expr
  321                      | '!' expr
  322                      | '~' expr
  323                      | expr "=== (T_IS_IDENTICAL)" expr
  324                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr "== (T_IS_EQUAL)" expr
  326                      | expr "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr '<' expr
  328                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr '>' expr
  330                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr "<=> (T_SPACESHIP)" expr
  332                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  333                      | '(' expr ')'
  334                      | new_expr
  335                      | expr '?' expr ':' expr
  336                      | expr '?' ':' expr
  337                      | expr "?? (T_COALESCE)" expr
  338                      | internal_functions_in_yacc
  339                      | "(int) (T_INT_CAST)" expr
  340                      | "(double) (T_DOUBLE_CAST)" expr
  341                      | "(string) (T_STRING_CAST)" expr
  342                      | "(array) (T_ARRAY_CAST)" expr
  343                      | "(object) (T_OBJECT_CAST)" expr
  344                      | "(bool) (T_BOOL_CAST)" expr
  345                      | "(unset) (T_UNSET_CAST)" expr
  346                      | "exit (T_EXIT)" exit_expr
  347                      | '@' expr
  348                      | scalar
  349                      | '`' backticks_expr '`'
  350                      | "print (T_PRINT)" expr
  351                      | "yield (T_YIELD)"
  352                      | "yield (T_YIELD)" expr
  353                      | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr
  354                      | "yield from (T_YIELD_FROM)" expr
  355                      | function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'
  356                      | "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

  357 function: "function (T_FUNCTION)"

  358 backup_doc_comment: %empty

  359 returns_ref: %empty
  360            | '&'

  361 lexical_vars: %empty
  362             | "use (T_USE)" '(' lexical_var_list ')'

  363 lexical_var_list: lexical_var_list ',' lexical_var
  364                 | lexical_var

  365 lexical_var: "variable (T_VARIABLE)"
  366            | '&' "variable (T_VARIABLE)"

  367 function_call: name argument_list
  368              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  369              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  370              | callable_expr argument_list

  371 class_name: "static (T_STATIC)"
  372           | name

  373 class_name_reference: class_name
  374                     | new_variable

  375 exit_expr: %empty
  376          | '(' optional_expr ')'

  377 backticks_expr: %empty
  378               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  379               | encaps_list

  380 ctor_arguments: %empty
  381               | argument_list

  382 dereferencable_scalar: "array (T_ARRAY)" '(' array_pair_list ')'
  383                      | '[' array_pair_list ']'
  384                      | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"

  385 scalar: "integer number (T_LNUMBER)"
  386       | "floating-point number (T_DNUMBER)"
  387       | "__LINE__ (T_LINE)"
  388       | "__FILE__ (T_FILE)"
  389       | "__DIR__ (T_DIR)"
  390       | "__TRAIT__ (T_TRAIT_C)"
  391       | "__METHOD__ (T_METHOD_C)"
  392       | "__FUNCTION__ (T_FUNC_C)"
  393       | "__NAMESPACE__ (T_NS_C)"
  394       | "__CLASS__ (T_CLASS_C)"
  395       | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  396       | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"
  397       | '"' encaps_list '"'
  398       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"
  399       | dereferencable_scalar
  400       | constant

  401 constant: name
  402         | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier
  403         | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier

  404 possible_comma: %empty
  405               | ','

  406 expr: variable
  407     | expr_without_variable

  408 optional_expr: %empty
  409              | expr

  410 variable_class_name: dereferencable

  411 dereferencable: variable
  412               | '(' expr ')'
  413               | dereferencable_scalar

  414 callable_expr: callable_variable
  415              | '(' expr ')'
  416              | dereferencable_scalar

  417 callable_variable: simple_variable
  418                  | dereferencable '[' optional_expr ']'
  419                  | constant '[' optional_expr ']'
  420                  | dereferencable '{' expr '}'
  421                  | dereferencable "-> (T_OBJECT_OPERATOR)" property_name argument_list
  422                  | function_call

  423 variable: callable_variable
  424         | static_member
  425         | dereferencable "-> (T_OBJECT_OPERATOR)" property_name

  426 simple_variable: "variable (T_VARIABLE)"
  427                | '$' '{' expr '}'
  428                | '$' simple_variable

  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable
  430              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

  431 new_variable: simple_variable
  432             | new_variable '[' optional_expr ']'
  433             | new_variable '{' expr '}'
  434             | new_variable "-> (T_OBJECT_OPERATOR)" property_name
  435             | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable
  436             | new_variable ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

  437 member_name: identifier
  438            | '{' expr '}'
  439            | simple_variable

  440 property_name: "identifier (T_STRING)"
  441              | '{' expr '}'
  442              | simple_variable

  443 assignment_list: assignment_list ',' assignment_list_element
  444                | assignment_list_element

  445 assignment_list_element: variable
  446                        | "list (T_LIST)" '(' assignment_list ')'
  447                        | %empty

  448 array_pair_list: %empty
  449                | non_empty_array_pair_list possible_comma

  450 non_empty_array_pair_list: non_empty_array_pair_list ',' array_pair
  451                          | array_pair

  452 array_pair: expr "=> (T_DOUBLE_ARROW)" expr
  453           | expr
  454           | expr "=> (T_DOUBLE_ARROW)" '&' variable
  455           | '&' variable

  456 encaps_list: encaps_list encaps_var
  457            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  458            | encaps_var
  459            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  460 encaps_var: "variable (T_VARIABLE)"
  461           | "variable (T_VARIABLE)" '[' encaps_var_offset ']'
  462           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  463           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  464           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '}'
  465           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  466           | "{$ (T_CURLY_OPEN)" variable '}'

  467 encaps_var_offset: "identifier (T_STRING)"
  468                  | "number (T_NUM_STRING)"
  469                  | "variable (T_VARIABLE)"

  470 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  471                           | "empty (T_EMPTY)" '(' expr ')'
  472                           | "include (T_INCLUDE)" expr
  473                           | "include_once (T_INCLUDE_ONCE)" expr
  474                           | "eval (T_EVAL)" '(' expr ')'
  475                           | "require (T_REQUIRE)" expr
  476                           | "require_once (T_REQUIRE_ONCE)" expr

  477 isset_variables: isset_variable
  478                | isset_variables ',' isset_variable

  479 isset_variable: expr


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 321
'"' (34) 397
'$' (36) 427 428
'%' (37) 316
'&' (38) 151 173 284 308 360 366 454 455
'(' (40) 82 116 120 121 122 123 132 133 134 136 143 149 174 192 193
    196 197 213 214 231 282 333 355 356 362 376 382 412 415 446 470
    471 474
')' (41) 82 116 120 121 122 123 132 133 134 136 143 149 174 192 193
    196 197 213 214 231 282 333 355 356 362 376 382 412 415 446 470
    471 474
'*' (42) 313
'+' (43) 311 319
',' (44) 97 101 107 147 203 216 219 222 233 263 267 271 276 363 405
    443 450 478
'-' (45) 312 320
'.' (46) 310
'/' (47) 315
':' (58) 141 176 178 180 183 184 188 191 196 197 199 212 335 336
';' (59) 82 83 88 89 90 91 92 116 121 122 124 125 126 127 128 129 131
    132 137 139 140 176 178 180 182 183 184 189 191 198 199 228 229
    234 239 240 249
'<' (60) 327
'=' (61) 205 225 266 269 270 282 283 284
'>' (62) 329
'?' (63) 335 336
'@' (64) 347
'[' (91) 383 418 419 432 461 465
']' (93) 383 418 419 432 461 465
'^' (94) 309
'`' (96) 349
'{' (123) 85 87 95 96 117 138 143 145 149 155 157 163 165 181 182 235
    236 250 279 355 356 420 427 433 438 441
'|' (124) 307
'}' (125) 85 87 95 96 117 138 143 145 149 155 157 163 165 181 182 235
    236 250 279 355 356 420 427 433 438 441 463 464 465 466
'~' (126) 322
error (256)
"include (T_INCLUDE)" (258) 2 472
"include_once (T_INCLUDE_ONCE)" (259) 3 473
"eval (T_EVAL)" (260) 4 474
"require (T_REQUIRE)" (261) 5 475
"require_once (T_REQUIRE_ONCE)" (262) 6 476
"or (T_LOGICAL_OR)" (263) 7 304
"xor (T_LOGICAL_XOR)" (264) 8 306
"and (T_LOGICAL_AND)" (265) 9 305
"print (T_PRINT)" (266) 45 350
"yield (T_YIELD)" (267) 46 351 352 353
"=> (T_DOUBLE_ARROW)" (268) 134 353 452 454
"yield from (T_YIELD_FROM)" (269) 354
"+= (T_PLUS_EQUAL)" (270) 286
"-= (T_MINUS_EQUAL)" (271) 287
"*= (T_MUL_EQUAL)" (272) 288
"/= (T_DIV_EQUAL)" (273) 290
".= (T_CONCAT_EQUAL)" (274) 291
"%= (T_MOD_EQUAL)" (275) 292
"&= (T_AND_EQUAL)" (276) 293
"|= (T_OR_EQUAL)" (277) 294
"^= (T_XOR_EQUAL)" (278) 295
"<<= (T_SL_EQUAL)" (279) 296
">>= (T_SR_EQUAL)" (280) 297
"**= (T_POW_EQUAL)" (281) 289
"?? (T_COALESCE)" (282) 337
"|| (T_BOOLEAN_OR)" (283) 302
"&& (T_BOOLEAN_AND)" (284) 303
"== (T_IS_EQUAL)" (285) 325
"!= (T_IS_NOT_EQUAL)" (286) 326
"=== (T_IS_IDENTICAL)" (287) 323
"!== (T_IS_NOT_IDENTICAL)" (288) 324
"<=> (T_SPACESHIP)" (289) 331
"<= (T_IS_SMALLER_OR_EQUAL)" (290) 328
">= (T_IS_GREATER_OR_EQUAL)" (291) 330
"<< (T_SL)" (292) 317
">> (T_SR)" (293) 318
"instanceof (T_INSTANCEOF)" (294) 10 332
"++ (T_INC)" (295) 298 299
"-- (T_DEC)" (296) 300 301
"(int) (T_INT_CAST)" (297) 339
"(double) (T_DOUBLE_CAST)" (298) 340
"(string) (T_STRING_CAST)" (299) 341
"(array) (T_ARRAY_CAST)" (300) 342
"(object) (T_OBJECT_CAST)" (301) 343
"(bool) (T_BOOL_CAST)" (302) 344
"(unset) (T_UNSET_CAST)" (303) 345
"** (T_POW)" (304) 314
"new (T_NEW)" (305) 11 280 281
"clone (T_CLONE)" (306) 12 285
T_NOELSE (307)
"elseif (T_ELSEIF)" (308) 15 193 197
"else (T_ELSE)" (309) 16 195 199
"endif (T_ENDIF)" (310) 17 198 199
"static (T_STATIC)" (311) 62 128 260 356 371
"abstract (T_ABSTRACT)" (312) 63 160 261
"final (T_FINAL)" (313) 64 161 262
"private (T_PRIVATE)" (314) 65 259
"protected (T_PROTECTED)" (315) 66 258
"public (T_PUBLIC)" (316) 67 257
"integer number (T_LNUMBER)" (317) 385
"floating-point number (T_DNUMBER)" (318) 386
"identifier (T_STRING)" (319) 68 72 73 104 106 140 141 149 155 157
    163 165 242 270 440 462 467
"variable (T_VARIABLE)" (320) 143 204 205 224 225 265 266 365 366 426
    460 461 462 469
T_INLINE_HTML (321) 130
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" (322) 378
    395 457 459
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (323) 384
"variable name (T_STRING_VARNAME)" (324) 464 465
"number (T_NUM_STRING)" (325) 468
"exit (T_EXIT)" (326) 13 346
"if (T_IF)" (327) 14 192 196
"echo (T_ECHO)" (328) 18 129
"do (T_DO)" (329) 19 121
"while (T_WHILE)" (330) 20 120 121
"endwhile (T_ENDWHILE)" (331) 21 191
"for (T_FOR)" (332) 22 122
"endfor (T_ENDFOR)" (333) 23 176
"foreach (T_FOREACH)" (334) 24 133 134
"endforeach (T_ENDFOREACH)" (335) 25 178
"declare (T_DECLARE)" (336) 26 136
"enddeclare (T_ENDDECLARE)" (337) 27 180
"as (T_AS)" (338) 28 104 106 133 134 242 243 244 245
"switch (T_SWITCH)" (339) 48 123
"endswitch (T_ENDSWITCH)" (340) 49 183 184
"case (T_CASE)" (341) 50 186
"default (T_DEFAULT)" (342) 51 187
"break (T_BREAK)" (343) 52 124
"continue (T_CONTINUE)" (344) 40 125
"goto (T_GOTO)" (345) 41 140
"function (T_FUNCTION)" (346) 42 93 357
"const (T_CONST)" (347) 43 92 94 229
"return (T_RETURN)" (348) 44 126
"try (T_TRY)" (349) 29 138
"catch (T_CATCH)" (350) 30 143
"finally (T_FINALLY)" (351) 31 145
"throw (T_THROW)" (352) 32 139
"use (T_USE)" (353) 33 88 89 90 91 230 362
"insteadof (T_INSTEADOF)" (354) 34 241
"global (T_GLOBAL)" (355) 35 127
"var (T_VAR)" (356) 36 252
"unset (T_UNSET)" (357) 37 132
"isset (T_ISSET)" (358) 38 470
"empty (T_EMPTY)" (359) 39 471
"__halt_compiler (T_HALT_COMPILER)" (360) 82 116
"class (T_CLASS)" (361) 60 155 157 279
"trait (T_TRAIT)" (362) 58 163
"interface (T_INTERFACE)" (363) 59 165
"extends (T_EXTENDS)" (364) 55 167 169
"implements (T_IMPLEMENTS)" (365) 56 171
"-> (T_OBJECT_OPERATOR)" (366) 421 425 434 462
"list (T_LIST)" (367) 47 174 282 446
"array (T_ARRAY)" (368) 53 208 382
"callable (T_CALLABLE)" (369) 54 209
"__LINE__ (T_LINE)" (370) 387
"__FILE__ (T_FILE)" (371) 388
"__DIR__ (T_DIR)" (372) 389
"__CLASS__ (T_CLASS_C)" (373) 394
"__TRAIT__ (T_TRAIT_C)" (374) 390
"__METHOD__ (T_METHOD_C)" (375) 391
"__FUNCTION__ (T_FUNC_C)" (376) 392
"comment (T_COMMENT)" (377)
"doc comment (T_DOC_COMMENT)" (378)
"open tag (T_OPEN_TAG)" (379)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (380)
"close tag (T_CLOSE_TAG)" (381)
"whitespace (T_WHITESPACE)" (382)
"heredoc start (T_START_HEREDOC)" (383) 395 396 398
"heredoc end (T_END_HEREDOC)" (384) 395 396 398
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (385) 463 464 465
"{$ (T_CURLY_OPEN)" (386) 466
":: (T_PAAMAYIM_NEKUDOTAYIM)" (387) 248 368 369 402 403 429 430 435
    436
"namespace (T_NAMESPACE)" (388) 57 75 83 85 87
"__NAMESPACE__ (T_NS_C)" (389) 393
"\\ (T_NS_SEPARATOR)" (390) 73 75 76 95 96 105 106
"... (T_ELLIPSIS)" (391) 153 218
T_ERROR (392)


Nonterminals, with rules where they appear

$accept (166)
    on left: 0
start (167)
    on left: 1, on right: 0
reserved_non_modifiers (168)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60, on right: 61
    243
semi_reserved (169)
    on left: 61 62 63 64 65 66 67, on right: 69
identifier (170)
    on left: 68 69, on right: 231 244 246 248 269 402 403 437
top_statement_list (171)
    on left: 70 71, on right: 1 70 85 87
namespace_name (172)
    on left: 72 73, on right: 73 74 75 76 83 85 95 96 103 104 105 106
name (173)
    on left: 74 75 76, on right: 143 167 210 232 233 248 367 372 401
top_statement (174)
    on left: 77 78 79 80 81 82 83 85 87 88 89 90 91 92, on right: 70
$@1 (175)
    on left: 84, on right: 85
$@2 (176)
    on left: 86, on right: 87
use_type (177)
    on left: 93 94, on right: 89 91 100
group_use_declaration (178)
    on left: 95, on right: 89
mixed_group_use_declaration (179)
    on left: 96, on right: 88
inline_use_declarations (180)
    on left: 97 98, on right: 96 97
inline_use_declaration (181)
    on left: 99 100, on right: 97 98
use_declarations (182)
    on left: 101 102, on right: 90 91 95 101
use_declaration (183)
    on left: 103 104 105 106, on right: 99 100 101 102
const_list (184)
    on left: 107 108, on right: 92 107 136
inner_statement_list (185)
    on left: 109 110, on right: 109 117 138 143 145 149 176 178 180
    186 187 191 196 197 199 250 355 356
inner_statement (186)
    on left: 111 112 113 114 115 116, on right: 109
statement (187)
    on left: 117 118 119 120 121 122 123 124 125 126 127 128 129 130
    131 132 133 134 136 137 138 139 140 141, on right: 77 111 121 175
    177 179 190 192 193 195
$@3 (188)
    on left: 135, on right: 136
catch_list (189)
    on left: 142 143, on right: 138 143
finally_statement (190)
    on left: 144 145, on right: 138
unset_variables (191)
    on left: 146 147, on right: 132 147
unset_variable (192)
    on left: 148, on right: 146 147
function_declaration_statement (193)
    on left: 149, on right: 78 112
is_reference (194)
    on left: 150 151, on right: 204 205
is_variadic (195)
    on left: 152 153, on right: 204 205
class_declaration_statement (196)
    on left: 155 157, on right: 79 113
@4 (197)
    on left: 154, on right: 155
@5 (198)
    on left: 156, on right: 157
class_modifiers (199)
    on left: 158 159, on right: 155 159
class_modifier (200)
    on left: 160 161, on right: 158 159
trait_declaration_statement (201)
    on left: 163, on right: 80 114
@6 (202)
    on left: 162, on right: 163
interface_declaration_statement (203)
    on left: 165, on right: 81 115
@7 (204)
    on left: 164, on right: 165
extends_from (205)
    on left: 166 167, on right: 155 157 279
interface_extends_list (206)
    on left: 168 169, on right: 165
implements_list (207)
    on left: 170 171, on right: 155 157 279
foreach_variable (208)
    on left: 172 173 174, on right: 133 134
for_statement (209)
    on left: 175 176, on right: 122
foreach_statement (210)
    on left: 177 178, on right: 133 134
declare_statement (211)
    on left: 179 180, on right: 136
switch_case_list (212)
    on left: 181 182 183 184, on right: 123
case_list (213)
    on left: 185 186 187, on right: 181 182 183 184 186 187
case_separator (214)
    on left: 188 189, on right: 186 187
while_statement (215)
    on left: 190 191, on right: 120
if_stmt_without_else (216)
    on left: 192 193, on right: 193 194 195
if_stmt (217)
    on left: 194 195, on right: 118
alt_if_stmt_without_else (218)
    on left: 196 197, on right: 197 198 199
alt_if_stmt (219)
    on left: 198 199, on right: 119
parameter_list (220)
    on left: 200 201, on right: 149 231 355 356
non_empty_parameter_list (221)
    on left: 202 203, on right: 200 203
parameter (222)
    on left: 204 205, on right: 202 203
optional_type (223)
    on left: 206 207, on right: 204 205
type (224)
    on left: 208 209 210, on right: 207 212
return_type (225)
    on left: 211 212, on right: 149 231 355 356
argument_list (226)
    on left: 213 214, on right: 367 368 369 370 381 421
non_empty_argument_list (227)
    on left: 215 216, on right: 214 216
argument (228)
    on left: 217 218, on right: 215 216
global_var_list (229)
    on left: 219 220, on right: 127 219
global_var (230)
    on left: 221, on right: 219 220
static_var_list (231)
    on left: 222 223, on right: 128 222
static_var (232)
    on left: 224 225, on right: 222 223
class_statement_list (233)
    on left: 226 227, on right: 155 157 163 165 226 279
class_statement (234)
    on left: 228 229 230 231, on right: 226
name_list (235)
    on left: 232 233, on right: 169 171 230 233 241
trait_adaptations (236)
    on left: 234 235 236, on right: 230
trait_adaptation_list (237)
    on left: 237 238, on right: 236 238
trait_adaptation (238)
    on left: 239 240, on right: 237 238
trait_precedence (239)
    on left: 241, on right: 239
trait_alias (240)
    on left: 242 243 244 245, on right: 240
trait_method_reference (241)
    on left: 246 247, on right: 242 243 244 245
absolute_trait_method_reference (242)
    on left: 248, on right: 241 247
method_body (243)
    on left: 249 250, on right: 231
variable_modifiers (244)
    on left: 251 252, on right: 228
method_modifiers (245)
    on left: 253 254, on right: 231
non_empty_member_modifiers (246)
    on left: 255 256, on right: 251 254 256
member_modifier (247)
    on left: 257 258 259 260 261 262, on right: 244 245 255 256
property_list (248)
    on left: 263 264, on right: 228 263
property (249)
    on left: 265 266, on right: 263 264
class_const_list (250)
    on left: 267 268, on right: 229 267
class_const_decl (251)
    on left: 269, on right: 267 268
const_decl (252)
    on left: 270, on right: 107 108
echo_expr_list (253)
    on left: 271 272, on right: 129 271
echo_expr (254)
    on left: 273, on right: 271 272
for_exprs (255)
    on left: 274 275, on right: 122
non_empty_for_exprs (256)
    on left: 276 277, on right: 275 276
anonymous_class (257)
    on left: 279, on right: 281
@8 (258)
    on left: 278, on right: 279
new_expr (259)
    on left: 280 281, on right: 334
expr_without_variable (260)
    on left: 282 283 284 285 286 287 288 289 290 291 292 293 294 295
    296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311
    312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327
    328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343
    344 345 346 347 348 349 350 351 352 353 354 355 356, on right:
    407
function (261)
    on left: 357, on right: 149 231 355 356
backup_doc_comment (262)
    on left: 358, on right: 149 155 157 163 165 231 279 355 356
returns_ref (263)
    on left: 359 360, on right: 149 231 355 356
lexical_vars (264)
    on left: 361 362, on right: 355 356
lexical_var_list (265)
    on left: 363 364, on right: 362 363
lexical_var (266)
    on left: 365 366, on right: 363 364
function_call (267)
    on left: 367 368 369 370, on right: 422
class_name (268)
    on left: 371 372, on right: 368 373 402 429 435
class_name_reference (269)
    on left: 373 374, on right: 280 332
exit_expr (270)
    on left: 375 376, on right: 346
backticks_expr (271)
    on left: 377 378 379, on right: 349
ctor_arguments (272)
    on left: 380 381, on right: 279 280
dereferencable_scalar (273)
    on left: 382 383 384, on right: 399 413 416
scalar (274)
    on left: 385 386 387 388 389 390 391 392 393 394 395 396 397 398
    399 400, on right: 348
constant (275)
    on left: 401 402 403, on right: 400 419
possible_comma (276)
    on left: 404 405, on right: 449
expr (277)
    on left: 406 407, on right: 120 121 123 131 133 134 139 186 192
    193 196 197 205 217 218 225 266 269 270 273 276 277 282 283 285
    286 287 288 289 290 291 292 293 294 295 296 297 302 303 304 305
    306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321
    322 323 324 325 326 327 328 329 330 331 332 333 335 336 337 339
    340 341 342 343 344 345 347 350 352 353 354 409 412 415 420 427
    433 438 441 452 453 454 463 465 471 472 473 474 475 476 479
optional_expr (278)
    on left: 408 409, on right: 124 125 126 376 418 419 432
variable_class_name (279)
    on left: 410, on right: 369 403 430
dereferencable (280)
    on left: 411 412 413, on right: 410 418 420 421 425
callable_expr (281)
    on left: 414 415 416, on right: 370
callable_variable (282)
    on left: 417 418 419 420 421 422, on right: 414 423
variable (283)
    on left: 423 424 425, on right: 148 172 173 283 284 286 287 288
    289 290 291 292 293 294 295 296 297 298 299 300 301 406 411 445
    454 455 466
simple_variable (284)
    on left: 426 427 428, on right: 221 417 428 429 430 431 435 436
    439 442
static_member (285)
    on left: 429 430, on right: 424
new_variable (286)
    on left: 431 432 433 434 435 436, on right: 374 432 433 434 436
member_name (287)
    on left: 437 438 439, on right: 368 369
property_name (288)
    on left: 440 441 442, on right: 421 425 434
assignment_list (289)
    on left: 443 444, on right: 174 282 443 446
assignment_list_element (290)
    on left: 445 446 447, on right: 443 444
array_pair_list (291)
    on left: 448 449, on right: 382 383
non_empty_array_pair_list (292)
    on left: 450 451, on right: 449 450
array_pair (293)
    on left: 452 453 454 455, on right: 450 451
encaps_list (294)
    on left: 456 457 458 459, on right: 379 397 398 456 457
encaps_var (295)
    on left: 460 461 462 463 464 465 466, on right: 456 458 459
encaps_var_offset (296)
    on left: 467 468 469, on right: 461
internal_functions_in_yacc (297)
    on left: 470 471 472 473 474 475 476, on right: 338
isset_variables (298)
    on left: 477 478, on right: 470 478
isset_variable (299)
    on left: 479, on right: 477 478


State 0

    0 $accept: . start "end of file"

    $default  reduce using rule 71 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


State 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 start: top_statement_list .
   70 top_statement_list: top_statement_list . top_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "const (T_CONST)"                             shift, and go to state 51
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "use (T_USE)"                                 shift, and go to state 55
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 1 (start)

    namespace_name                   go to state 83
    name                             go to state 84
    top_statement                    go to state 85
    statement                        go to state 86
    function_declaration_statement   go to state 87
    class_declaration_statement      go to state 88
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 91
    interface_declaration_statement  go to state 92
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 3

    0 $accept: start "end of file" .

    $default  accept


State 4

  472 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 118
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 5

  473 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 119
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 6

  474 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 120


State 7

  475 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 121
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 8

  476 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 122
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 9

  350 expr_without_variable: "print (T_PRINT)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 123
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 10

  351 expr_without_variable: "yield (T_YIELD)" .
  352                      | "yield (T_YIELD)" . expr
  353                      | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 351 (expr_without_variable)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 124
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 11

  354 expr_without_variable: "yield from (T_YIELD_FROM)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 125
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 12

  319 expr_without_variable: '+' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 126
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 13

  320 expr_without_variable: '-' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 127
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 14

  321 expr_without_variable: '!' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 128
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 15

  322 expr_without_variable: '~' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 129
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 16

  299 expr_without_variable: "++ (T_INC)" . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 134
    simple_variable        go to state 111
    static_member          go to state 112


State 17

  301 expr_without_variable: "-- (T_DEC)" . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 135
    simple_variable        go to state 111
    static_member          go to state 112


State 18

  339 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 136
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 19

  340 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 137
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 20

  341 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 138
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 21

  342 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 139
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 22

  343 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 140
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 23

  344 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 141
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 24

  345 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 142
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 25

  347 expr_without_variable: '@' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 143
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 26

  383 dereferencable_scalar: '[' . array_pair_list ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 144
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 448 (array_pair_list)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 145
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    array_pair_list             go to state 146
    non_empty_array_pair_list   go to state 147
    array_pair                  go to state 148
    internal_functions_in_yacc  go to state 113


State 27

  280 new_expr: "new (T_NEW)" . class_name_reference ctor_arguments
  281         | "new (T_NEW)" . anonymous_class

    "static (T_STATIC)"        shift, and go to state 130
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 35
    "class (T_CLASS)"          shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76
    '$'                        shift, and go to state 82

    namespace_name        go to state 83
    name                  go to state 150
    anonymous_class       go to state 151
    class_name            go to state 152
    class_name_reference  go to state 153
    simple_variable       go to state 154
    new_variable          go to state 155


State 28

  285 expr_without_variable: "clone (T_CLONE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 156
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 29

  128 statement: "static (T_STATIC)" . static_var_list ';'
  356 expr_without_variable: "static (T_STATIC)" . function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'
  371 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 157
    "function (T_FUNCTION)"  shift, and go to state 50

    $default  reduce using rule 371 (class_name)

    static_var_list  go to state 158
    static_var       go to state 159
    function         go to state 160


State 30

  160 class_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 160 (class_modifier)


State 31

  161 class_modifier: "final (T_FINAL)" .

    $default  reduce using rule 161 (class_modifier)


State 32

  385 scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 385 (scalar)


State 33

  386 scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 386 (scalar)


State 34

   72 namespace_name: "identifier (T_STRING)" .
  141 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 161

    $default  reduce using rule 72 (namespace_name)


State 35

  426 simple_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 426 (simple_variable)


State 36

  130 statement: T_INLINE_HTML .

    $default  reduce using rule 130 (statement)


State 37

  384 dereferencable_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 384 (dereferencable_scalar)


State 38

  346 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 162

    $default  reduce using rule 375 (exit_expr)

    exit_expr  go to state 163


State 39

  192 if_stmt_without_else: "if (T_IF)" . '(' expr ')' statement
  196 alt_if_stmt_without_else: "if (T_IF)" . '(' expr ')' ':' inner_statement_list

    '('  shift, and go to state 164


State 40

  129 statement: "echo (T_ECHO)" . echo_expr_list ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    echo_expr_list              go to state 165
    echo_expr                   go to state 166
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 167
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 41

  121 statement: "do (T_DO)" . statement "while (T_WHILE)" '(' expr ')' ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 168
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 42

  120 statement: "while (T_WHILE)" . '(' expr ')' while_statement

    '('  shift, and go to state 169


State 43

  122 statement: "for (T_FOR)" . '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement

    '('  shift, and go to state 170


State 44

  133 statement: "foreach (T_FOREACH)" . '(' expr "as (T_AS)" foreach_variable ')' foreach_statement
  134          | "foreach (T_FOREACH)" . '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    '('  shift, and go to state 171


State 45

  136 statement: "declare (T_DECLARE)" . '(' const_list ')' $@3 declare_statement

    '('  shift, and go to state 172


State 46

  123 statement: "switch (T_SWITCH)" . '(' expr ')' switch_case_list

    '('  shift, and go to state 173


State 47

  124 statement: "break (T_BREAK)" . optional_expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 408 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 175
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 48

  125 statement: "continue (T_CONTINUE)" . optional_expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 408 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 176
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 49

  140 statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 177


State 50

  357 function: "function (T_FUNCTION)" .

    $default  reduce using rule 357 (function)


State 51

   92 top_statement: "const (T_CONST)" . const_list ';'

    "identifier (T_STRING)"  shift, and go to state 178

    const_list  go to state 179
    const_decl  go to state 180


State 52

  126 statement: "return (T_RETURN)" . optional_expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 408 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 181
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 53

  138 statement: "try (T_TRY)" . '{' inner_statement_list '}' catch_list finally_statement

    '{'  shift, and go to state 182


State 54

  139 statement: "throw (T_THROW)" . expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 183
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 55

   88 top_statement: "use (T_USE)" . mixed_group_use_declaration ';'
   89              | "use (T_USE)" . use_type group_use_declaration ';'
   90              | "use (T_USE)" . use_declarations ';'
   91              | "use (T_USE)" . use_type use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 115
    "function (T_FUNCTION)"  shift, and go to state 184
    "const (T_CONST)"        shift, and go to state 185
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name               go to state 187
    use_type                     go to state 188
    mixed_group_use_declaration  go to state 189
    use_declarations             go to state 190
    use_declaration              go to state 191


State 56

  127 statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    global_var_list  go to state 192
    global_var       go to state 193
    simple_variable  go to state 194


State 57

  132 statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 195


State 58

  470 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 196


State 59

  471 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' expr ')'

    '('  shift, and go to state 197


State 60

   82 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 198


State 61

  157 class_declaration_statement: "class (T_CLASS)" . @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 156 (@5)

    @5  go to state 199


State 62

  163 trait_declaration_statement: "trait (T_TRAIT)" . @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 162 (@6)

    @6  go to state 200


State 63

  165 interface_declaration_statement: "interface (T_INTERFACE)" . @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 164 (@7)

    @7  go to state 201


State 64

  282 expr_without_variable: "list (T_LIST)" . '(' assignment_list ')' '=' expr

    '('  shift, and go to state 202


State 65

  382 dereferencable_scalar: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 203


State 66

  387 scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 387 (scalar)


State 67

  388 scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 388 (scalar)


State 68

  389 scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 389 (scalar)


State 69

  394 scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 394 (scalar)


State 70

  390 scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 390 (scalar)


State 71

  391 scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 391 (scalar)


State 72

  392 scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 392 (scalar)


State 73

  395 scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  396       | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  398       | "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 205
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 206
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 209
    encaps_var   go to state 210


State 74

   75 name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
   83 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   85              | "namespace (T_NAMESPACE)" . namespace_name $@1 '{' top_statement_list '}'
   87              | "namespace (T_NAMESPACE)" . $@2 '{' top_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 211

    $default  reduce using rule 86 ($@2)

    namespace_name  go to state 212
    $@2             go to state 213


State 75

  393 scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 393 (scalar)


State 76

   76 name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 214


State 77

  333 expr_without_variable: '(' . expr ')'
  412 dereferencable: '(' . expr ')'
  415 callable_expr: '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 215
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 78

  137 statement: ';' .

    $default  reduce using rule 137 (statement)


State 79

  117 statement: '{' . inner_statement_list '}'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 216


State 80

  349 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 217
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 377 (backticks_expr)

    backticks_expr  go to state 218
    encaps_list     go to state 219
    encaps_var      go to state 210


State 81

  397 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 220
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 221
    encaps_var   go to state 210


State 82

  427 simple_variable: '$' . '{' expr '}'
  428                | '$' . simple_variable

    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 222
    '$'                      shift, and go to state 82

    simple_variable  go to state 223


State 83

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   74 name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 74 (name)


State 84

  367 function_call: name . argument_list
  372 class_name: name .
  401 constant: name .

    '('  shift, and go to state 225

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 372 (class_name)
    $default                       reduce using rule 401 (constant)

    argument_list  go to state 226


State 85

   70 top_statement_list: top_statement_list top_statement .

    $default  reduce using rule 70 (top_statement_list)


State 86

   77 top_statement: statement .

    $default  reduce using rule 77 (top_statement)


State 87

   78 top_statement: function_declaration_statement .

    $default  reduce using rule 78 (top_statement)


State 88

   79 top_statement: class_declaration_statement .

    $default  reduce using rule 79 (top_statement)


State 89

  155 class_declaration_statement: class_modifiers . "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'
  159 class_modifiers: class_modifiers . class_modifier

    "abstract (T_ABSTRACT)"  shift, and go to state 30
    "final (T_FINAL)"        shift, and go to state 31
    "class (T_CLASS)"        shift, and go to state 227

    class_modifier  go to state 228


State 90

  158 class_modifiers: class_modifier .

    $default  reduce using rule 158 (class_modifiers)


State 91

   80 top_statement: trait_declaration_statement .

    $default  reduce using rule 80 (top_statement)


State 92

   81 top_statement: interface_declaration_statement .

    $default  reduce using rule 81 (top_statement)


State 93

  193 if_stmt_without_else: if_stmt_without_else . "elseif (T_ELSEIF)" '(' expr ')' statement
  194 if_stmt: if_stmt_without_else .
  195        | if_stmt_without_else . "else (T_ELSE)" statement

    "elseif (T_ELSEIF)"  shift, and go to state 229
    "else (T_ELSE)"      shift, and go to state 230

    $default  reduce using rule 194 (if_stmt)


State 94

  118 statement: if_stmt .

    $default  reduce using rule 118 (statement)


State 95

  197 alt_if_stmt_without_else: alt_if_stmt_without_else . "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list
  198 alt_if_stmt: alt_if_stmt_without_else . "endif (T_ENDIF)" ';'
  199            | alt_if_stmt_without_else . "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  shift, and go to state 231
    "else (T_ELSE)"      shift, and go to state 232
    "endif (T_ENDIF)"    shift, and go to state 233


State 96

  119 statement: alt_if_stmt .

    $default  reduce using rule 119 (statement)


State 97

  334 expr_without_variable: new_expr .

    $default  reduce using rule 334 (expr_without_variable)


State 98

  407 expr: expr_without_variable .

    $default  reduce using rule 407 (expr)


State 99

  149 function_declaration_statement: function . returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'
  355 expr_without_variable: function . returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '&'  shift, and go to state 234

    $default  reduce using rule 359 (returns_ref)

    returns_ref  go to state 235


State 100

  422 callable_variable: function_call .

    $default  reduce using rule 422 (callable_variable)


State 101

  368 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  402 constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier
  429 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 236


State 102

  399 scalar: dereferencable_scalar .
  413 dereferencable: dereferencable_scalar .
  416 callable_expr: dereferencable_scalar .

    '['                            reduce using rule 413 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 413 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 413 (dereferencable)
    '('                            reduce using rule 416 (callable_expr)
    '{'                            reduce using rule 413 (dereferencable)
    $default                       reduce using rule 399 (scalar)


State 103

  348 expr_without_variable: scalar .

    $default  reduce using rule 348 (expr_without_variable)


State 104

  400 scalar: constant .
  419 callable_variable: constant . '[' optional_expr ']'

    '['  shift, and go to state 237

    $default  reduce using rule 400 (scalar)


State 105

  131 statement: expr . ';'
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ';'                           shift, and go to state 267


State 106

  369 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  403 constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier
  430 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 268


State 107

  410 variable_class_name: dereferencable .
  418 callable_variable: dereferencable . '[' optional_expr ']'
  420                  | dereferencable . '{' expr '}'
  421                  | dereferencable . "-> (T_OBJECT_OPERATOR)" property_name argument_list
  425 variable: dereferencable . "-> (T_OBJECT_OPERATOR)" property_name

    '['                       shift, and go to state 269
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 270
    '{'                       shift, and go to state 271

    $default  reduce using rule 410 (variable_class_name)


State 108

  370 function_call: callable_expr . argument_list

    '('  shift, and go to state 225

    argument_list  go to state 272


State 109

  414 callable_expr: callable_variable .
  423 variable: callable_variable .

    '('       reduce using rule 414 (callable_expr)
    $default  reduce using rule 423 (variable)


State 110

  283 expr_without_variable: variable . '=' expr
  284                      | variable . '=' '&' variable
  286                      | variable . "+= (T_PLUS_EQUAL)" expr
  287                      | variable . "-= (T_MINUS_EQUAL)" expr
  288                      | variable . "*= (T_MUL_EQUAL)" expr
  289                      | variable . "**= (T_POW_EQUAL)" expr
  290                      | variable . "/= (T_DIV_EQUAL)" expr
  291                      | variable . ".= (T_CONCAT_EQUAL)" expr
  292                      | variable . "%= (T_MOD_EQUAL)" expr
  293                      | variable . "&= (T_AND_EQUAL)" expr
  294                      | variable . "|= (T_OR_EQUAL)" expr
  295                      | variable . "^= (T_XOR_EQUAL)" expr
  296                      | variable . "<<= (T_SL_EQUAL)" expr
  297                      | variable . ">>= (T_SR_EQUAL)" expr
  298                      | variable . "++ (T_INC)"
  300                      | variable . "-- (T_DEC)"
  406 expr: variable .
  411 dereferencable: variable .

    '='                    shift, and go to state 273
    "+= (T_PLUS_EQUAL)"    shift, and go to state 274
    "-= (T_MINUS_EQUAL)"   shift, and go to state 275
    "*= (T_MUL_EQUAL)"     shift, and go to state 276
    "/= (T_DIV_EQUAL)"     shift, and go to state 277
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 278
    "%= (T_MOD_EQUAL)"     shift, and go to state 279
    "&= (T_AND_EQUAL)"     shift, and go to state 280
    "|= (T_OR_EQUAL)"      shift, and go to state 281
    "^= (T_XOR_EQUAL)"     shift, and go to state 282
    "<<= (T_SL_EQUAL)"     shift, and go to state 283
    ">>= (T_SR_EQUAL)"     shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    "++ (T_INC)"           shift, and go to state 286
    "-- (T_DEC)"           shift, and go to state 287

    '['                            reduce using rule 411 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 411 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 411 (dereferencable)
    '{'                            reduce using rule 411 (dereferencable)
    $default                       reduce using rule 406 (expr)


State 111

  417 callable_variable: simple_variable .

    $default  reduce using rule 417 (callable_variable)


State 112

  424 variable: static_member .

    $default  reduce using rule 424 (variable)


State 113

  338 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 338 (expr_without_variable)


State 114

  356 expr_without_variable: "static (T_STATIC)" . function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'
  371 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 50

    $default  reduce using rule 371 (class_name)

    function  go to state 160


State 115

   72 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 72 (namespace_name)


State 116

   75 name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 211


State 117

  355 expr_without_variable: function . returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '&'  shift, and go to state 234

    $default  reduce using rule 359 (returns_ref)

    returns_ref  go to state 288


State 118

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  472 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 472 (internal_functions_in_yacc)


State 119

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  473 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 473 (internal_functions_in_yacc)


State 120

  474 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 289
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 121

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  475 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 475 (internal_functions_in_yacc)


State 122

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  476 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 476 (internal_functions_in_yacc)


State 123

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  350                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 350 (expr_without_variable)


State 124

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  352                      | "yield (T_YIELD)" expr .
  353                      | "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" expr

    "=> (T_DOUBLE_ARROW)"         shift, and go to state 290
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 352 (expr_without_variable)


State 125

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  354                      | "yield from (T_YIELD_FROM)" expr .

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 354 (expr_without_variable)


State 126

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  319                      | '+' expr .
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 319 (expr_without_variable)


State 127

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  320                      | '-' expr .
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 320 (expr_without_variable)


State 128

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  321                      | '!' expr .
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 321 (expr_without_variable)


State 129

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  322                      | '~' expr .
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 322 (expr_without_variable)


State 130

  371 class_name: "static (T_STATIC)" .

    $default  reduce using rule 371 (class_name)


State 131

  412 dereferencable: '(' . expr ')'
  415 callable_expr: '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 291
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 132

  413 dereferencable: dereferencable_scalar .
  416 callable_expr: dereferencable_scalar .

    '('       reduce using rule 416 (callable_expr)
    $default  reduce using rule 413 (dereferencable)


State 133

  419 callable_variable: constant . '[' optional_expr ']'

    '['  shift, and go to state 237


State 134

  299 expr_without_variable: "++ (T_INC)" variable .
  411 dereferencable: variable .

    '['                            reduce using rule 411 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 411 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 411 (dereferencable)
    '{'                            reduce using rule 411 (dereferencable)
    $default                       reduce using rule 299 (expr_without_variable)


State 135

  301 expr_without_variable: "-- (T_DEC)" variable .
  411 dereferencable: variable .

    '['                            reduce using rule 411 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 411 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 411 (dereferencable)
    '{'                            reduce using rule 411 (dereferencable)
    $default                       reduce using rule 301 (expr_without_variable)


State 136

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  339                      | "(int) (T_INT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 339 (expr_without_variable)


State 137

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  340                      | "(double) (T_DOUBLE_CAST)" expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 340 (expr_without_variable)


State 138

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  341                      | "(string) (T_STRING_CAST)" expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 341 (expr_without_variable)


State 139

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  342                      | "(array) (T_ARRAY_CAST)" expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 342 (expr_without_variable)


State 140

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  343                      | "(object) (T_OBJECT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 343 (expr_without_variable)


State 141

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  344                      | "(bool) (T_BOOL_CAST)" expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 344 (expr_without_variable)


State 142

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  345                      | "(unset) (T_UNSET_CAST)" expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 345 (expr_without_variable)


State 143

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  347                      | '@' expr .

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 347 (expr_without_variable)


State 144

  455 array_pair: '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 292
    simple_variable        go to state 111
    static_member          go to state 112


State 145

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  452 array_pair: expr . "=> (T_DOUBLE_ARROW)" expr
  453           | expr .
  454           | expr . "=> (T_DOUBLE_ARROW)" '&' variable

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 293
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 453 (array_pair)


State 146

  383 dereferencable_scalar: '[' array_pair_list . ']'

    ']'  shift, and go to state 294


State 147

  449 array_pair_list: non_empty_array_pair_list . possible_comma
  450 non_empty_array_pair_list: non_empty_array_pair_list . ',' array_pair

    ','  shift, and go to state 295

    $default  reduce using rule 404 (possible_comma)

    possible_comma  go to state 296


State 148

  451 non_empty_array_pair_list: array_pair .

    $default  reduce using rule 451 (non_empty_array_pair_list)


State 149

  279 anonymous_class: "class (T_CLASS)" . @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 278 (@8)

    @8  go to state 297


State 150

  372 class_name: name .

    $default  reduce using rule 372 (class_name)


State 151

  281 new_expr: "new (T_NEW)" anonymous_class .

    $default  reduce using rule 281 (new_expr)


State 152

  373 class_name_reference: class_name .
  435 new_variable: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 298

    $default  reduce using rule 373 (class_name_reference)


State 153

  280 new_expr: "new (T_NEW)" class_name_reference . ctor_arguments

    '('  shift, and go to state 225

    $default  reduce using rule 380 (ctor_arguments)

    argument_list   go to state 299
    ctor_arguments  go to state 300


State 154

  431 new_variable: simple_variable .

    $default  reduce using rule 431 (new_variable)


State 155

  374 class_name_reference: new_variable .
  432 new_variable: new_variable . '[' optional_expr ']'
  433             | new_variable . '{' expr '}'
  434             | new_variable . "-> (T_OBJECT_OPERATOR)" property_name
  436             | new_variable . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    '['                            shift, and go to state 301
    "-> (T_OBJECT_OPERATOR)"       shift, and go to state 302
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 303
    '{'                            shift, and go to state 304

    $default  reduce using rule 374 (class_name_reference)


State 156

  285 expr_without_variable: "clone (T_CLONE)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    $default  reduce using rule 285 (expr_without_variable)


State 157

  224 static_var: "variable (T_VARIABLE)" .
  225           | "variable (T_VARIABLE)" . '=' expr

    '='  shift, and go to state 305

    $default  reduce using rule 224 (static_var)


State 158

  128 statement: "static (T_STATIC)" static_var_list . ';'
  222 static_var_list: static_var_list . ',' static_var

    ','  shift, and go to state 306
    ';'  shift, and go to state 307


State 159

  223 static_var_list: static_var .

    $default  reduce using rule 223 (static_var_list)


State 160

  356 expr_without_variable: "static (T_STATIC)" function . returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '&'  shift, and go to state 234

    $default  reduce using rule 359 (returns_ref)

    returns_ref  go to state 308


State 161

  141 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 141 (statement)


State 162

  376 exit_expr: '(' . optional_expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 408 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 309
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 163

  346 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 346 (expr_without_variable)


State 164

  192 if_stmt_without_else: "if (T_IF)" '(' . expr ')' statement
  196 alt_if_stmt_without_else: "if (T_IF)" '(' . expr ')' ':' inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 310
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 165

  129 statement: "echo (T_ECHO)" echo_expr_list . ';'
  271 echo_expr_list: echo_expr_list . ',' echo_expr

    ','  shift, and go to state 311
    ';'  shift, and go to state 312


State 166

  272 echo_expr_list: echo_expr .

    $default  reduce using rule 272 (echo_expr_list)


State 167

  273 echo_expr: expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 273 (echo_expr)


State 168

  121 statement: "do (T_DO)" statement . "while (T_WHILE)" '(' expr ')' ';'

    "while (T_WHILE)"  shift, and go to state 313


State 169

  120 statement: "while (T_WHILE)" '(' . expr ')' while_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 314
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 170

  122 statement: "for (T_FOR)" '(' . for_exprs ';' for_exprs ';' for_exprs ')' for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 274 (for_exprs)

    namespace_name              go to state 83
    name                        go to state 84
    for_exprs                   go to state 315
    non_empty_for_exprs         go to state 316
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 317
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 171

  133 statement: "foreach (T_FOREACH)" '(' . expr "as (T_AS)" foreach_variable ')' foreach_statement
  134          | "foreach (T_FOREACH)" '(' . expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 318
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 172

  136 statement: "declare (T_DECLARE)" '(' . const_list ')' $@3 declare_statement

    "identifier (T_STRING)"  shift, and go to state 178

    const_list  go to state 319
    const_decl  go to state 180


State 173

  123 statement: "switch (T_SWITCH)" '(' . expr ')' switch_case_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 320
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 174

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  409 optional_expr: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 409 (optional_expr)


State 175

  124 statement: "break (T_BREAK)" optional_expr . ';'

    ';'  shift, and go to state 321


State 176

  125 statement: "continue (T_CONTINUE)" optional_expr . ';'

    ';'  shift, and go to state 322


State 177

  140 statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 323


State 178

  270 const_decl: "identifier (T_STRING)" . '=' expr

    '='  shift, and go to state 324


State 179

   92 top_statement: "const (T_CONST)" const_list . ';'
  107 const_list: const_list . ',' const_decl

    ','  shift, and go to state 325
    ';'  shift, and go to state 326


State 180

  108 const_list: const_decl .

    $default  reduce using rule 108 (const_list)


State 181

  126 statement: "return (T_RETURN)" optional_expr . ';'

    ';'  shift, and go to state 327


State 182

  138 statement: "try (T_TRY)" '{' . inner_statement_list '}' catch_list finally_statement

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 328


State 183

  139 statement: "throw (T_THROW)" expr . ';'
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ';'                           shift, and go to state 329


State 184

   93 use_type: "function (T_FUNCTION)" .

    $default  reduce using rule 93 (use_type)


State 185

   94 use_type: "const (T_CONST)" .

    $default  reduce using rule 94 (use_type)


State 186

  105 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
  106                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 330


State 187

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   96 mixed_group_use_declaration: namespace_name . "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}'
  103 use_declaration: namespace_name .
  104                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 331
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 332

    $default  reduce using rule 103 (use_declaration)


State 188

   89 top_statement: "use (T_USE)" use_type . group_use_declaration ';'
   91              | "use (T_USE)" use_type . use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name         go to state 333
    group_use_declaration  go to state 334
    use_declarations       go to state 335
    use_declaration        go to state 191


State 189

   88 top_statement: "use (T_USE)" mixed_group_use_declaration . ';'

    ';'  shift, and go to state 336


State 190

   90 top_statement: "use (T_USE)" use_declarations . ';'
  101 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 337
    ';'  shift, and go to state 338


State 191

  102 use_declarations: use_declaration .

    $default  reduce using rule 102 (use_declarations)


State 192

  127 statement: "global (T_GLOBAL)" global_var_list . ';'
  219 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 339
    ';'  shift, and go to state 340


State 193

  220 global_var_list: global_var .

    $default  reduce using rule 220 (global_var_list)


State 194

  221 global_var: simple_variable .

    $default  reduce using rule 221 (global_var)


State 195

  132 statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    unset_variables        go to state 341
    unset_variable         go to state 342
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 343
    simple_variable        go to state 111
    static_member          go to state 112


State 196

  470 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 344
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113
    isset_variables             go to state 345
    isset_variable              go to state 346


State 197

  471 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 347
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 198

   82 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 348


State 199

  157 class_declaration_statement: "class (T_CLASS)" @5 . "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 349


State 200

  163 trait_declaration_statement: "trait (T_TRAIT)" @6 . "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 350


State 201

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 . "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 351


State 202

  282 expr_without_variable: "list (T_LIST)" '(' . assignment_list ')' '=' expr

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 352
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 447 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 353
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list          go to state 354
    assignment_list_element  go to state 355


State 203

  382 dereferencable_scalar: "array (T_ARRAY)" '(' . array_pair_list ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 144
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 448 (array_pair_list)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 145
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    array_pair_list             go to state 356
    non_empty_array_pair_list   go to state 147
    array_pair                  go to state 148
    internal_functions_in_yacc  go to state 113


State 204

  460 encaps_var: "variable (T_VARIABLE)" .
  461           | "variable (T_VARIABLE)" . '[' encaps_var_offset ']'
  462           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 357
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 358

    $default  reduce using rule 460 (encaps_var)


State 205

  395 scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  459 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 359
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 360


State 206

  396 scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 396 (scalar)


State 207

  463 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  464           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '}'
  465           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "variable name (T_STRING_VARNAME)"            shift, and go to state 361
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 362
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 208

  466 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 363
    simple_variable        go to state 111
    static_member          go to state 112


State 209

  398 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  456 encaps_list: encaps_list . encaps_var
  457            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 364
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 365
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_var  go to state 366


State 210

  458 encaps_list: encaps_var .

    $default  reduce using rule 458 (encaps_list)


State 211

   75 name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 367


State 212

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   83 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   85              | "namespace (T_NAMESPACE)" namespace_name . $@1 '{' top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    ';'                    shift, and go to state 368

    $default  reduce using rule 84 ($@1)

    $@1  go to state 369


State 213

   87 top_statement: "namespace (T_NAMESPACE)" $@2 . '{' top_statement_list '}'

    '{'  shift, and go to state 370


State 214

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   76 name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 76 (name)


State 215

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  333                      | '(' expr . ')'
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  412 dereferencable: '(' expr . ')'
  415 callable_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 371


State 216

  109 inner_statement_list: inner_statement_list . inner_statement
  117 statement: '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 373
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 217

  378 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  459 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    $default  reduce using rule 378 (backticks_expr)

    encaps_var  go to state 360


State 218

  349 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 380


State 219

  379 backticks_expr: encaps_list .
  456 encaps_list: encaps_list . encaps_var
  457            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 364
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 379 (backticks_expr)

    encaps_var  go to state 366


State 220

  459 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 360


State 221

  397 scalar: '"' encaps_list . '"'
  456 encaps_list: encaps_list . encaps_var
  457            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 364
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208
    '"'                                                         shift, and go to state 381

    encaps_var  go to state 366


State 222

  427 simple_variable: '$' '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 382
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 223

  428 simple_variable: '$' simple_variable .

    $default  reduce using rule 428 (simple_variable)


State 224

   73 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 383


State 225

  213 argument_list: '(' . ')'
  214              | '(' . non_empty_argument_list ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    "... (T_ELLIPSIS)"                            shift, and go to state 384
    '('                                           shift, and go to state 77
    ')'                                           shift, and go to state 385
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    non_empty_argument_list     go to state 386
    argument                    go to state 387
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 388
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 226

  367 function_call: name argument_list .

    $default  reduce using rule 367 (function_call)


State 227

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" . @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 154 (@4)

    @4  go to state 389


State 228

  159 class_modifiers: class_modifiers class_modifier .

    $default  reduce using rule 159 (class_modifiers)


State 229

  193 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" . '(' expr ')' statement

    '('  shift, and go to state 390


State 230

  195 if_stmt: if_stmt_without_else "else (T_ELSE)" . statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 391
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 231

  197 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" . '(' expr ')' ':' inner_statement_list

    '('  shift, and go to state 392


State 232

  199 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" . ':' inner_statement_list "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 393


State 233

  198 alt_if_stmt: alt_if_stmt_without_else "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 394


State 234

  360 returns_ref: '&' .

    $default  reduce using rule 360 (returns_ref)


State 235

  149 function_declaration_statement: function returns_ref . "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'
  355 expr_without_variable: function returns_ref . '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 395
    '('                      shift, and go to state 396


State 236

  368 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . member_name argument_list
  402 constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . identifier
  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 419
    "variable (T_VARIABLE)"          shift, and go to state 35
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462
    '{'                              shift, and go to state 463
    '$'                              shift, and go to state 82

    reserved_non_modifiers  go to state 464
    semi_reserved           go to state 465
    identifier              go to state 466
    simple_variable         go to state 467
    member_name             go to state 468


State 237

  419 callable_variable: constant '[' . optional_expr ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 408 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 469
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 238

  304 expr_without_variable: expr "or (T_LOGICAL_OR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 470
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 239

  306 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 471
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 240

  305 expr_without_variable: expr "and (T_LOGICAL_AND)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 472
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 241

  335 expr_without_variable: expr '?' . expr ':' expr
  336                      | expr '?' . ':' expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 473
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 474
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 242

  337 expr_without_variable: expr "?? (T_COALESCE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 475
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 243

  302 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 476
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 244

  303 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 477
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 245

  307 expr_without_variable: expr '|' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 478
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 246

  309 expr_without_variable: expr '^' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 479
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 247

  308 expr_without_variable: expr '&' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 480
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 248

  325 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 481
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 249

  326 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 482
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 250

  323 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 483
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 251

  324 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 484
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 252

  331 expr_without_variable: expr "<=> (T_SPACESHIP)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 485
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 253

  327 expr_without_variable: expr '<' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 486
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 254

  328 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 487
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 255

  329 expr_without_variable: expr '>' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 488
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 256

  330 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 489
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 257

  317 expr_without_variable: expr "<< (T_SL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 490
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 258

  318 expr_without_variable: expr ">> (T_SR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 491
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 259

  311 expr_without_variable: expr '+' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 492
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 260

  312 expr_without_variable: expr '-' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 493
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 261

  310 expr_without_variable: expr '.' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 494
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 262

  313 expr_without_variable: expr '*' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 495
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 263

  315 expr_without_variable: expr '/' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 496
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 264

  316 expr_without_variable: expr '%' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 497
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 265

  332 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "static (T_STATIC)"        shift, and go to state 130
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 35
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76
    '$'                        shift, and go to state 82

    namespace_name        go to state 83
    name                  go to state 150
    class_name            go to state 152
    class_name_reference  go to state 498
    simple_variable       go to state 154
    new_variable          go to state 155


State 266

  314 expr_without_variable: expr "** (T_POW)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 499
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 267

  131 statement: expr ';' .

    $default  reduce using rule 131 (statement)


State 268

  369 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . member_name argument_list
  403 constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . identifier
  430 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 419
    "variable (T_VARIABLE)"          shift, and go to state 35
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462
    '{'                              shift, and go to state 463
    '$'                              shift, and go to state 82

    reserved_non_modifiers  go to state 464
    semi_reserved           go to state 465
    identifier              go to state 500
    simple_variable         go to state 501
    member_name             go to state 502


State 269

  418 callable_variable: dereferencable '[' . optional_expr ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 408 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 503
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 270

  421 callable_variable: dereferencable "-> (T_OBJECT_OPERATOR)" . property_name argument_list
  425 variable: dereferencable "-> (T_OBJECT_OPERATOR)" . property_name

    "identifier (T_STRING)"  shift, and go to state 504
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 505
    '$'                      shift, and go to state 82

    simple_variable  go to state 506
    property_name    go to state 507


State 271

  420 callable_variable: dereferencable '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 508
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 272

  370 function_call: callable_expr argument_list .

    $default  reduce using rule 370 (function_call)


State 273

  283 expr_without_variable: variable '=' . expr
  284                      | variable '=' . '&' variable

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 509
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 510
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 274

  286 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 511
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 275

  287 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 512
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 276

  288 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 513
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 277

  290 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 514
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 278

  291 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 515
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 279

  292 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 516
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 280

  293 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 517
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 281

  294 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 518
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 282

  295 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 519
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 283

  296 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 520
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 284

  297 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 521
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 285

  289 expr_without_variable: variable "**= (T_POW_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 522
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 286

  298 expr_without_variable: variable "++ (T_INC)" .

    $default  reduce using rule 298 (expr_without_variable)


State 287

  300 expr_without_variable: variable "-- (T_DEC)" .

    $default  reduce using rule 300 (expr_without_variable)


State 288

  355 expr_without_variable: function returns_ref . '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '('  shift, and go to state 396


State 289

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  474 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 523


State 290

  353 expr_without_variable: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 524
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 291

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  412 dereferencable: '(' expr . ')'
  415 callable_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 525


State 292

  411 dereferencable: variable .
  455 array_pair: '&' variable .

    ','       reduce using rule 455 (array_pair)
    ')'       reduce using rule 455 (array_pair)
    ']'       reduce using rule 455 (array_pair)
    $default  reduce using rule 411 (dereferencable)


State 293

  452 array_pair: expr "=> (T_DOUBLE_ARROW)" . expr
  454           | expr "=> (T_DOUBLE_ARROW)" . '&' variable

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 526
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 527
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 294

  383 dereferencable_scalar: '[' array_pair_list ']' .

    $default  reduce using rule 383 (dereferencable_scalar)


State 295

  405 possible_comma: ',' .
  450 non_empty_array_pair_list: non_empty_array_pair_list ',' . array_pair

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 144
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 405 (possible_comma)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 145
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    array_pair                  go to state 528
    internal_functions_in_yacc  go to state 113


State 296

  449 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 449 (array_pair_list)


State 297

  279 anonymous_class: "class (T_CLASS)" @8 . ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    '('  shift, and go to state 225

    $default  reduce using rule 380 (ctor_arguments)

    argument_list   go to state 299
    ctor_arguments  go to state 529


State 298

  435 new_variable: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    simple_variable  go to state 530


State 299

  381 ctor_arguments: argument_list .

    $default  reduce using rule 381 (ctor_arguments)


State 300

  280 new_expr: "new (T_NEW)" class_name_reference ctor_arguments .

    $default  reduce using rule 280 (new_expr)


State 301

  432 new_variable: new_variable '[' . optional_expr ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 408 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 531
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 302

  434 new_variable: new_variable "-> (T_OBJECT_OPERATOR)" . property_name

    "identifier (T_STRING)"  shift, and go to state 504
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 505
    '$'                      shift, and go to state 82

    simple_variable  go to state 506
    property_name    go to state 532


State 303

  436 new_variable: new_variable ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    simple_variable  go to state 533


State 304

  433 new_variable: new_variable '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 534
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 305

  225 static_var: "variable (T_VARIABLE)" '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 535
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 306

  222 static_var_list: static_var_list ',' . static_var

    "variable (T_VARIABLE)"  shift, and go to state 157

    static_var  go to state 536


State 307

  128 statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 128 (statement)


State 308

  356 expr_without_variable: "static (T_STATIC)" function returns_ref . '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '('  shift, and go to state 537


State 309

  376 exit_expr: '(' optional_expr . ')'

    ')'  shift, and go to state 538


State 310

  192 if_stmt_without_else: "if (T_IF)" '(' expr . ')' statement
  196 alt_if_stmt_without_else: "if (T_IF)" '(' expr . ')' ':' inner_statement_list
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 539


State 311

  271 echo_expr_list: echo_expr_list ',' . echo_expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    echo_expr                   go to state 540
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 167
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 312

  129 statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 129 (statement)


State 313

  121 statement: "do (T_DO)" statement "while (T_WHILE)" . '(' expr ')' ';'

    '('  shift, and go to state 541


State 314

  120 statement: "while (T_WHILE)" '(' expr . ')' while_statement
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 542


State 315

  122 statement: "for (T_FOR)" '(' for_exprs . ';' for_exprs ';' for_exprs ')' for_statement

    ';'  shift, and go to state 543


State 316

  275 for_exprs: non_empty_for_exprs .
  276 non_empty_for_exprs: non_empty_for_exprs . ',' expr

    ','  shift, and go to state 544

    $default  reduce using rule 275 (for_exprs)


State 317

  277 non_empty_for_exprs: expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 277 (non_empty_for_exprs)


State 318

  133 statement: "foreach (T_FOREACH)" '(' expr . "as (T_AS)" foreach_variable ')' foreach_statement
  134          | "foreach (T_FOREACH)" '(' expr . "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    "as (T_AS)"                   shift, and go to state 545


State 319

  107 const_list: const_list . ',' const_decl
  136 statement: "declare (T_DECLARE)" '(' const_list . ')' $@3 declare_statement

    ','  shift, and go to state 325
    ')'  shift, and go to state 546


State 320

  123 statement: "switch (T_SWITCH)" '(' expr . ')' switch_case_list
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 547


State 321

  124 statement: "break (T_BREAK)" optional_expr ';' .

    $default  reduce using rule 124 (statement)


State 322

  125 statement: "continue (T_CONTINUE)" optional_expr ';' .

    $default  reduce using rule 125 (statement)


State 323

  140 statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 140 (statement)


State 324

  270 const_decl: "identifier (T_STRING)" '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 548
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 325

  107 const_list: const_list ',' . const_decl

    "identifier (T_STRING)"  shift, and go to state 178

    const_decl  go to state 549


State 326

   92 top_statement: "const (T_CONST)" const_list ';' .

    $default  reduce using rule 92 (top_statement)


State 327

  126 statement: "return (T_RETURN)" optional_expr ';' .

    $default  reduce using rule 126 (statement)


State 328

  109 inner_statement_list: inner_statement_list . inner_statement
  138 statement: "try (T_TRY)" '{' inner_statement_list . '}' catch_list finally_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 550
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 329

  139 statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 139 (statement)


State 330

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  105 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
  106                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 551
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 105 (use_declaration)


State 331

  104 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 552


State 332

   73 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"
   96 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" . '{' inline_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 383
    '{'                      shift, and go to state 553


State 333

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   95 group_use_declaration: namespace_name . "\\ (T_NS_SEPARATOR)" '{' use_declarations '}'
  103 use_declaration: namespace_name .
  104                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 331
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 554

    $default  reduce using rule 103 (use_declaration)


State 334

   89 top_statement: "use (T_USE)" use_type group_use_declaration . ';'

    ';'  shift, and go to state 555


State 335

   91 top_statement: "use (T_USE)" use_type use_declarations . ';'
  101 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 337
    ';'  shift, and go to state 556


State 336

   88 top_statement: "use (T_USE)" mixed_group_use_declaration ';' .

    $default  reduce using rule 88 (top_statement)


State 337

  101 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name   go to state 557
    use_declaration  go to state 558


State 338

   90 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 90 (top_statement)


State 339

  219 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    global_var       go to state 559
    simple_variable  go to state 194


State 340

  127 statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 127 (statement)


State 341

  132 statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
  147 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 560
    ')'  shift, and go to state 561


State 342

  146 unset_variables: unset_variable .

    $default  reduce using rule 146 (unset_variables)


State 343

  148 unset_variable: variable .
  411 dereferencable: variable .

    ','       reduce using rule 148 (unset_variable)
    ')'       reduce using rule 148 (unset_variable)
    $default  reduce using rule 411 (dereferencable)


State 344

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  479 isset_variable: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 479 (isset_variable)


State 345

  470 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  478 isset_variables: isset_variables . ',' isset_variable

    ','  shift, and go to state 562
    ')'  shift, and go to state 563


State 346

  477 isset_variables: isset_variable .

    $default  reduce using rule 477 (isset_variables)


State 347

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  471 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 564


State 348

   82 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 565


State 349

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" . extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 566

    $default  reduce using rule 166 (extends_from)

    extends_from  go to state 567


State 350

  163 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 568


State 351

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" . interface_extends_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 569

    $default  reduce using rule 168 (interface_extends_list)

    interface_extends_list  go to state 570


State 352

  446 assignment_list_element: "list (T_LIST)" . '(' assignment_list ')'

    '('  shift, and go to state 571


State 353

  411 dereferencable: variable .
  445 assignment_list_element: variable .

    ','       reduce using rule 445 (assignment_list_element)
    ')'       reduce using rule 445 (assignment_list_element)
    $default  reduce using rule 411 (dereferencable)


State 354

  282 expr_without_variable: "list (T_LIST)" '(' assignment_list . ')' '=' expr
  443 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 572
    ')'  shift, and go to state 573


State 355

  444 assignment_list: assignment_list_element .

    $default  reduce using rule 444 (assignment_list)


State 356

  382 dereferencable_scalar: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 574


State 357

  461 encaps_var: "variable (T_VARIABLE)" '[' . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 575
    "variable (T_VARIABLE)"  shift, and go to state 576
    "number (T_NUM_STRING)"  shift, and go to state 577

    encaps_var_offset  go to state 578


State 358

  462 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 579


State 359

  395 scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 395 (scalar)


State 360

  459 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 459 (encaps_list)


State 361

  464 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '}'
  465           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 580
    '}'  shift, and go to state 581


State 362

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  463 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    '}'                           shift, and go to state 582


State 363

  411 dereferencable: variable .
  466 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 583

    $default  reduce using rule 411 (dereferencable)


State 364

  457 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 457 (encaps_list)


State 365

  398 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 398 (scalar)


State 366

  456 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 456 (encaps_list)


State 367

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   75 name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 75 (name)


State 368

   83 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 83 (top_statement)


State 369

   85 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 . '{' top_statement_list '}'

    '{'  shift, and go to state 584


State 370

   87 top_statement: "namespace (T_NAMESPACE)" $@2 '{' . top_statement_list '}'

    $default  reduce using rule 71 (top_statement_list)

    top_statement_list  go to state 585


State 371

  333 expr_without_variable: '(' expr ')' .
  412 dereferencable: '(' expr ')' .
  415 callable_expr: '(' expr ')' .

    '['                            reduce using rule 412 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 412 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 412 (dereferencable)
    '('                            reduce using rule 415 (callable_expr)
    '{'                            reduce using rule 412 (dereferencable)
    $default                       reduce using rule 333 (expr_without_variable)


State 372

  116 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 586


State 373

  117 statement: '{' inner_statement_list '}' .

    $default  reduce using rule 117 (statement)


State 374

  109 inner_statement_list: inner_statement_list inner_statement .

    $default  reduce using rule 109 (inner_statement_list)


State 375

  111 inner_statement: statement .

    $default  reduce using rule 111 (inner_statement)


State 376

  112 inner_statement: function_declaration_statement .

    $default  reduce using rule 112 (inner_statement)


State 377

  113 inner_statement: class_declaration_statement .

    $default  reduce using rule 113 (inner_statement)


State 378

  114 inner_statement: trait_declaration_statement .

    $default  reduce using rule 114 (inner_statement)


State 379

  115 inner_statement: interface_declaration_statement .

    $default  reduce using rule 115 (inner_statement)


State 380

  349 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 349 (expr_without_variable)


State 381

  397 scalar: '"' encaps_list '"' .

    $default  reduce using rule 397 (scalar)


State 382

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  427 simple_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    '}'                           shift, and go to state 587


State 383

   73 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 73 (namespace_name)


State 384

  218 argument: "... (T_ELLIPSIS)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 588
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 385

  213 argument_list: '(' ')' .

    $default  reduce using rule 213 (argument_list)


State 386

  214 argument_list: '(' non_empty_argument_list . ')'
  216 non_empty_argument_list: non_empty_argument_list . ',' argument

    ','  shift, and go to state 589
    ')'  shift, and go to state 590


State 387

  215 non_empty_argument_list: argument .

    $default  reduce using rule 215 (non_empty_argument_list)


State 388

  217 argument: expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 217 (argument)


State 389

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 . "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 591


State 390

  193 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' . expr ')' statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 592
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 391

  195 if_stmt: if_stmt_without_else "else (T_ELSE)" statement .

    $default  reduce using rule 195 (if_stmt)


State 392

  197 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' . expr ')' ':' inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 593
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 393

  199 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' . inner_statement_list "endif (T_ENDIF)" ';'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 594


State 394

  198 alt_if_stmt: alt_if_stmt_without_else "endif (T_ENDIF)" ';' .

    $default  reduce using rule 198 (alt_if_stmt)


State 395

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" . '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'

    '('  shift, and go to state 595


State 396

  355 expr_without_variable: function returns_ref '(' . parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 596
    "callable (T_CALLABLE)"    shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 201 (parameter_list)
    $default  reduce using rule 206 (optional_type)

    namespace_name            go to state 83
    name                      go to state 598
    parameter_list            go to state 599
    non_empty_parameter_list  go to state 600
    parameter                 go to state 601
    optional_type             go to state 602
    type                      go to state 603


State 397

    2 reserved_non_modifiers: "include (T_INCLUDE)" .

    $default  reduce using rule 2 (reserved_non_modifiers)


State 398

    3 reserved_non_modifiers: "include_once (T_INCLUDE_ONCE)" .

    $default  reduce using rule 3 (reserved_non_modifiers)


State 399

    4 reserved_non_modifiers: "eval (T_EVAL)" .

    $default  reduce using rule 4 (reserved_non_modifiers)


State 400

    5 reserved_non_modifiers: "require (T_REQUIRE)" .

    $default  reduce using rule 5 (reserved_non_modifiers)


State 401

    6 reserved_non_modifiers: "require_once (T_REQUIRE_ONCE)" .

    $default  reduce using rule 6 (reserved_non_modifiers)


State 402

    7 reserved_non_modifiers: "or (T_LOGICAL_OR)" .

    $default  reduce using rule 7 (reserved_non_modifiers)


State 403

    8 reserved_non_modifiers: "xor (T_LOGICAL_XOR)" .

    $default  reduce using rule 8 (reserved_non_modifiers)


State 404

    9 reserved_non_modifiers: "and (T_LOGICAL_AND)" .

    $default  reduce using rule 9 (reserved_non_modifiers)


State 405

   45 reserved_non_modifiers: "print (T_PRINT)" .

    $default  reduce using rule 45 (reserved_non_modifiers)


State 406

   46 reserved_non_modifiers: "yield (T_YIELD)" .

    $default  reduce using rule 46 (reserved_non_modifiers)


State 407

   10 reserved_non_modifiers: "instanceof (T_INSTANCEOF)" .

    $default  reduce using rule 10 (reserved_non_modifiers)


State 408

   11 reserved_non_modifiers: "new (T_NEW)" .

    $default  reduce using rule 11 (reserved_non_modifiers)


State 409

   12 reserved_non_modifiers: "clone (T_CLONE)" .

    $default  reduce using rule 12 (reserved_non_modifiers)


State 410

   15 reserved_non_modifiers: "elseif (T_ELSEIF)" .

    $default  reduce using rule 15 (reserved_non_modifiers)


State 411

   16 reserved_non_modifiers: "else (T_ELSE)" .

    $default  reduce using rule 16 (reserved_non_modifiers)


State 412

   17 reserved_non_modifiers: "endif (T_ENDIF)" .

    $default  reduce using rule 17 (reserved_non_modifiers)


State 413

   62 semi_reserved: "static (T_STATIC)" .

    $default  reduce using rule 62 (semi_reserved)


State 414

   63 semi_reserved: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 63 (semi_reserved)


State 415

   64 semi_reserved: "final (T_FINAL)" .

    $default  reduce using rule 64 (semi_reserved)


State 416

   65 semi_reserved: "private (T_PRIVATE)" .

    $default  reduce using rule 65 (semi_reserved)


State 417

   66 semi_reserved: "protected (T_PROTECTED)" .

    $default  reduce using rule 66 (semi_reserved)


State 418

   67 semi_reserved: "public (T_PUBLIC)" .

    $default  reduce using rule 67 (semi_reserved)


State 419

   68 identifier: "identifier (T_STRING)" .

    $default  reduce using rule 68 (identifier)


State 420

   13 reserved_non_modifiers: "exit (T_EXIT)" .

    $default  reduce using rule 13 (reserved_non_modifiers)


State 421

   14 reserved_non_modifiers: "if (T_IF)" .

    $default  reduce using rule 14 (reserved_non_modifiers)


State 422

   18 reserved_non_modifiers: "echo (T_ECHO)" .

    $default  reduce using rule 18 (reserved_non_modifiers)


State 423

   19 reserved_non_modifiers: "do (T_DO)" .

    $default  reduce using rule 19 (reserved_non_modifiers)


State 424

   20 reserved_non_modifiers: "while (T_WHILE)" .

    $default  reduce using rule 20 (reserved_non_modifiers)


State 425

   21 reserved_non_modifiers: "endwhile (T_ENDWHILE)" .

    $default  reduce using rule 21 (reserved_non_modifiers)


State 426

   22 reserved_non_modifiers: "for (T_FOR)" .

    $default  reduce using rule 22 (reserved_non_modifiers)


State 427

   23 reserved_non_modifiers: "endfor (T_ENDFOR)" .

    $default  reduce using rule 23 (reserved_non_modifiers)


State 428

   24 reserved_non_modifiers: "foreach (T_FOREACH)" .

    $default  reduce using rule 24 (reserved_non_modifiers)


State 429

   25 reserved_non_modifiers: "endforeach (T_ENDFOREACH)" .

    $default  reduce using rule 25 (reserved_non_modifiers)


State 430

   26 reserved_non_modifiers: "declare (T_DECLARE)" .

    $default  reduce using rule 26 (reserved_non_modifiers)


State 431

   27 reserved_non_modifiers: "enddeclare (T_ENDDECLARE)" .

    $default  reduce using rule 27 (reserved_non_modifiers)


State 432

   28 reserved_non_modifiers: "as (T_AS)" .

    $default  reduce using rule 28 (reserved_non_modifiers)


State 433

   48 reserved_non_modifiers: "switch (T_SWITCH)" .

    $default  reduce using rule 48 (reserved_non_modifiers)


State 434

   49 reserved_non_modifiers: "endswitch (T_ENDSWITCH)" .

    $default  reduce using rule 49 (reserved_non_modifiers)


State 435

   50 reserved_non_modifiers: "case (T_CASE)" .

    $default  reduce using rule 50 (reserved_non_modifiers)


State 436

   51 reserved_non_modifiers: "default (T_DEFAULT)" .

    $default  reduce using rule 51 (reserved_non_modifiers)


State 437

   52 reserved_non_modifiers: "break (T_BREAK)" .

    $default  reduce using rule 52 (reserved_non_modifiers)


State 438

   40 reserved_non_modifiers: "continue (T_CONTINUE)" .

    $default  reduce using rule 40 (reserved_non_modifiers)


State 439

   41 reserved_non_modifiers: "goto (T_GOTO)" .

    $default  reduce using rule 41 (reserved_non_modifiers)


State 440

   42 reserved_non_modifiers: "function (T_FUNCTION)" .

    $default  reduce using rule 42 (reserved_non_modifiers)


State 441

   43 reserved_non_modifiers: "const (T_CONST)" .

    $default  reduce using rule 43 (reserved_non_modifiers)


State 442

   44 reserved_non_modifiers: "return (T_RETURN)" .

    $default  reduce using rule 44 (reserved_non_modifiers)


State 443

   29 reserved_non_modifiers: "try (T_TRY)" .

    $default  reduce using rule 29 (reserved_non_modifiers)


State 444

   30 reserved_non_modifiers: "catch (T_CATCH)" .

    $default  reduce using rule 30 (reserved_non_modifiers)


State 445

   31 reserved_non_modifiers: "finally (T_FINALLY)" .

    $default  reduce using rule 31 (reserved_non_modifiers)


State 446

   32 reserved_non_modifiers: "throw (T_THROW)" .

    $default  reduce using rule 32 (reserved_non_modifiers)


State 447

   33 reserved_non_modifiers: "use (T_USE)" .

    $default  reduce using rule 33 (reserved_non_modifiers)


State 448

   34 reserved_non_modifiers: "insteadof (T_INSTEADOF)" .

    $default  reduce using rule 34 (reserved_non_modifiers)


State 449

   35 reserved_non_modifiers: "global (T_GLOBAL)" .

    $default  reduce using rule 35 (reserved_non_modifiers)


State 450

   36 reserved_non_modifiers: "var (T_VAR)" .

    $default  reduce using rule 36 (reserved_non_modifiers)


State 451

   37 reserved_non_modifiers: "unset (T_UNSET)" .

    $default  reduce using rule 37 (reserved_non_modifiers)


State 452

   38 reserved_non_modifiers: "isset (T_ISSET)" .

    $default  reduce using rule 38 (reserved_non_modifiers)


State 453

   39 reserved_non_modifiers: "empty (T_EMPTY)" .

    $default  reduce using rule 39 (reserved_non_modifiers)


State 454

   60 reserved_non_modifiers: "class (T_CLASS)" .

    $default  reduce using rule 60 (reserved_non_modifiers)


State 455

   58 reserved_non_modifiers: "trait (T_TRAIT)" .

    $default  reduce using rule 58 (reserved_non_modifiers)


State 456

   59 reserved_non_modifiers: "interface (T_INTERFACE)" .

    $default  reduce using rule 59 (reserved_non_modifiers)


State 457

   55 reserved_non_modifiers: "extends (T_EXTENDS)" .

    $default  reduce using rule 55 (reserved_non_modifiers)


State 458

   56 reserved_non_modifiers: "implements (T_IMPLEMENTS)" .

    $default  reduce using rule 56 (reserved_non_modifiers)


State 459

   47 reserved_non_modifiers: "list (T_LIST)" .

    $default  reduce using rule 47 (reserved_non_modifiers)


State 460

   53 reserved_non_modifiers: "array (T_ARRAY)" .

    $default  reduce using rule 53 (reserved_non_modifiers)


State 461

   54 reserved_non_modifiers: "callable (T_CALLABLE)" .

    $default  reduce using rule 54 (reserved_non_modifiers)


State 462

   57 reserved_non_modifiers: "namespace (T_NAMESPACE)" .

    $default  reduce using rule 57 (reserved_non_modifiers)


State 463

  438 member_name: '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 604
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 464

   61 semi_reserved: reserved_non_modifiers .

    $default  reduce using rule 61 (semi_reserved)


State 465

   69 identifier: semi_reserved .

    $default  reduce using rule 69 (identifier)


State 466

  402 constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier .
  437 member_name: identifier .

    '('       reduce using rule 437 (member_name)
    $default  reduce using rule 402 (constant)


State 467

  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .
  439 member_name: simple_variable .

    '('       reduce using rule 439 (member_name)
    $default  reduce using rule 429 (static_member)


State 468

  368 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name . argument_list

    '('  shift, and go to state 225

    argument_list  go to state 605


State 469

  419 callable_variable: constant '[' optional_expr . ']'

    ']'  shift, and go to state 606


State 470

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  304                      | expr "or (T_LOGICAL_OR)" expr .
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 304 (expr_without_variable)


State 471

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr "xor (T_LOGICAL_XOR)" expr .
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 306 (expr_without_variable)


State 472

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  305                      | expr "and (T_LOGICAL_AND)" expr .
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 305 (expr_without_variable)


State 473

  336 expr_without_variable: expr '?' ':' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 607
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 474

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  335                      | expr '?' expr . ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    ':'                           shift, and go to state 608
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266


State 475

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  337                      | expr "?? (T_COALESCE)" expr .

    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 337 (expr_without_variable)


State 476

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  302                      | expr "|| (T_BOOLEAN_OR)" expr .
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 302 (expr_without_variable)


State 477

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  303                      | expr "&& (T_BOOLEAN_AND)" expr .
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 303 (expr_without_variable)


State 478

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  307                      | expr '|' expr .
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 307 (expr_without_variable)


State 479

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  309                      | expr '^' expr .
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 309 (expr_without_variable)


State 480

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  308                      | expr '&' expr .
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 308 (expr_without_variable)


State 481

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr "== (T_IS_EQUAL)" expr .
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 325 (expr_without_variable)


State 482

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 326 (expr_without_variable)


State 483

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr "=== (T_IS_IDENTICAL)" expr .
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 323 (expr_without_variable)


State 484

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 324 (expr_without_variable)


State 485

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  331                      | expr "<=> (T_SPACESHIP)" expr .
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 331 (expr_without_variable)


State 486

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  327                      | expr '<' expr .
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 257
    ">> (T_SR)"                  shift, and go to state 258
    '+'                          shift, and go to state 259
    '-'                          shift, and go to state 260
    '.'                          shift, and go to state 261
    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 327 (expr_without_variable)


State 487

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 257
    ">> (T_SR)"                  shift, and go to state 258
    '+'                          shift, and go to state 259
    '-'                          shift, and go to state 260
    '.'                          shift, and go to state 261
    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 328 (expr_without_variable)


State 488

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  329                      | expr '>' expr .
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 257
    ">> (T_SR)"                  shift, and go to state 258
    '+'                          shift, and go to state 259
    '-'                          shift, and go to state 260
    '.'                          shift, and go to state 261
    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 329 (expr_without_variable)


State 489

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 257
    ">> (T_SR)"                  shift, and go to state 258
    '+'                          shift, and go to state 259
    '-'                          shift, and go to state 260
    '.'                          shift, and go to state 261
    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 330 (expr_without_variable)


State 490

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  317                      | expr "<< (T_SL)" expr .
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '+'                          shift, and go to state 259
    '-'                          shift, and go to state 260
    '.'                          shift, and go to state 261
    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 317 (expr_without_variable)


State 491

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  318                      | expr ">> (T_SR)" expr .
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '+'                          shift, and go to state 259
    '-'                          shift, and go to state 260
    '.'                          shift, and go to state 261
    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 318 (expr_without_variable)


State 492

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  311                      | expr '+' expr .
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 311 (expr_without_variable)


State 493

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  312                      | expr '-' expr .
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 312 (expr_without_variable)


State 494

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  310                      | expr '.' expr .
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '*'                          shift, and go to state 262
    '/'                          shift, and go to state 263
    '%'                          shift, and go to state 264
    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 310 (expr_without_variable)


State 495

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  313                      | expr '*' expr .
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 313 (expr_without_variable)


State 496

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  315                      | expr '/' expr .
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 315 (expr_without_variable)


State 497

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  316                      | expr '%' expr .
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 265
    "** (T_POW)"                 shift, and go to state 266

    $default  reduce using rule 316 (expr_without_variable)


State 498

  332 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 332 (expr_without_variable)


State 499

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  314                      | expr "** (T_POW)" expr .
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 266

    $default  reduce using rule 314 (expr_without_variable)


State 500

  403 constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier .
  437 member_name: identifier .

    '('       reduce using rule 437 (member_name)
    $default  reduce using rule 403 (constant)


State 501

  430 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .
  439 member_name: simple_variable .

    '('       reduce using rule 439 (member_name)
    $default  reduce using rule 430 (static_member)


State 502

  369 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name . argument_list

    '('  shift, and go to state 225

    argument_list  go to state 609


State 503

  418 callable_variable: dereferencable '[' optional_expr . ']'

    ']'  shift, and go to state 610


State 504

  440 property_name: "identifier (T_STRING)" .

    $default  reduce using rule 440 (property_name)


State 505

  441 property_name: '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 611
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 506

  442 property_name: simple_variable .

    $default  reduce using rule 442 (property_name)


State 507

  421 callable_variable: dereferencable "-> (T_OBJECT_OPERATOR)" property_name . argument_list
  425 variable: dereferencable "-> (T_OBJECT_OPERATOR)" property_name .

    '('  shift, and go to state 225

    $default  reduce using rule 425 (variable)

    argument_list  go to state 612


State 508

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  420 callable_variable: dereferencable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    '}'                           shift, and go to state 613


State 509

  284 expr_without_variable: variable '=' '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 614
    simple_variable        go to state 111
    static_member          go to state 112


State 510

  283 expr_without_variable: variable '=' expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 283 (expr_without_variable)


State 511

  286 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 286 (expr_without_variable)


State 512

  287 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 287 (expr_without_variable)


State 513

  288 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 288 (expr_without_variable)


State 514

  290 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 290 (expr_without_variable)


State 515

  291 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 291 (expr_without_variable)


State 516

  292 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 292 (expr_without_variable)


State 517

  293 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 293 (expr_without_variable)


State 518

  294 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 294 (expr_without_variable)


State 519

  295 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 295 (expr_without_variable)


State 520

  296 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 296 (expr_without_variable)


State 521

  297 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 297 (expr_without_variable)


State 522

  289 expr_without_variable: variable "**= (T_POW_EQUAL)" expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 289 (expr_without_variable)


State 523

  474 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 474 (internal_functions_in_yacc)


State 524

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  353                      | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr .

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 353 (expr_without_variable)


State 525

  412 dereferencable: '(' expr ')' .
  415 callable_expr: '(' expr ')' .

    '('       reduce using rule 415 (callable_expr)
    $default  reduce using rule 412 (dereferencable)


State 526

  454 array_pair: expr "=> (T_DOUBLE_ARROW)" '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 615
    simple_variable        go to state 111
    static_member          go to state 112


State 527

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  452 array_pair: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 452 (array_pair)


State 528

  450 non_empty_array_pair_list: non_empty_array_pair_list ',' array_pair .

    $default  reduce using rule 450 (non_empty_array_pair_list)


State 529

  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments . extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 566

    $default  reduce using rule 166 (extends_from)

    extends_from  go to state 616


State 530

  435 new_variable: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .

    $default  reduce using rule 435 (new_variable)


State 531

  432 new_variable: new_variable '[' optional_expr . ']'

    ']'  shift, and go to state 617


State 532

  434 new_variable: new_variable "-> (T_OBJECT_OPERATOR)" property_name .

    $default  reduce using rule 434 (new_variable)


State 533

  436 new_variable: new_variable ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .

    $default  reduce using rule 436 (new_variable)


State 534

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  433 new_variable: new_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    '}'                           shift, and go to state 618


State 535

  225 static_var: "variable (T_VARIABLE)" '=' expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 225 (static_var)


State 536

  222 static_var_list: static_var_list ',' static_var .

    $default  reduce using rule 222 (static_var_list)


State 537

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' . parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 596
    "callable (T_CALLABLE)"    shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 201 (parameter_list)
    $default  reduce using rule 206 (optional_type)

    namespace_name            go to state 83
    name                      go to state 598
    parameter_list            go to state 619
    non_empty_parameter_list  go to state 600
    parameter                 go to state 601
    optional_type             go to state 602
    type                      go to state 603


State 538

  376 exit_expr: '(' optional_expr ')' .

    $default  reduce using rule 376 (exit_expr)


State 539

  192 if_stmt_without_else: "if (T_IF)" '(' expr ')' . statement
  196 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' . ':' inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 620
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 621
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 540

  271 echo_expr_list: echo_expr_list ',' echo_expr .

    $default  reduce using rule 271 (echo_expr_list)


State 541

  121 statement: "do (T_DO)" statement "while (T_WHILE)" '(' . expr ')' ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 622
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 542

  120 statement: "while (T_WHILE)" '(' expr ')' . while_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 623
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 624
    while_statement             go to state 625
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 543

  122 statement: "for (T_FOR)" '(' for_exprs ';' . for_exprs ';' for_exprs ')' for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 274 (for_exprs)

    namespace_name              go to state 83
    name                        go to state 84
    for_exprs                   go to state 626
    non_empty_for_exprs         go to state 316
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 317
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 544

  276 non_empty_for_exprs: non_empty_for_exprs ',' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 627
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 545

  133 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" . foreach_variable ')' foreach_statement
  134          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" . foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    '&'                                           shift, and go to state 628
    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 629
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    foreach_variable       go to state 630
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 631
    simple_variable        go to state 111
    static_member          go to state 112


State 546

  136 statement: "declare (T_DECLARE)" '(' const_list ')' . $@3 declare_statement

    $default  reduce using rule 135 ($@3)

    $@3  go to state 632


State 547

  123 statement: "switch (T_SWITCH)" '(' expr ')' . switch_case_list

    ':'  shift, and go to state 633
    '{'  shift, and go to state 634

    switch_case_list  go to state 635


State 548

  270 const_decl: "identifier (T_STRING)" '=' expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 270 (const_decl)


State 549

  107 const_list: const_list ',' const_decl .

    $default  reduce using rule 107 (const_list)


State 550

  138 statement: "try (T_TRY)" '{' inner_statement_list '}' . catch_list finally_statement

    $default  reduce using rule 142 (catch_list)

    catch_list  go to state 636


State 551

  106 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 637


State 552

  104 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 104 (use_declaration)


State 553

   96 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' . inline_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 115
    "function (T_FUNCTION)"  shift, and go to state 184
    "const (T_CONST)"        shift, and go to state 185
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name           go to state 557
    use_type                 go to state 638
    inline_use_declarations  go to state 639
    inline_use_declaration   go to state 640
    use_declaration          go to state 641


State 554

   73 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"
   95 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" . '{' use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 383
    '{'                      shift, and go to state 642


State 555

   89 top_statement: "use (T_USE)" use_type group_use_declaration ';' .

    $default  reduce using rule 89 (top_statement)


State 556

   91 top_statement: "use (T_USE)" use_type use_declarations ';' .

    $default  reduce using rule 91 (top_statement)


State 557

   73 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  103 use_declaration: namespace_name .
  104                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 331
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 103 (use_declaration)


State 558

  101 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 101 (use_declarations)


State 559

  219 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 219 (global_var_list)


State 560

  147 unset_variables: unset_variables ',' . unset_variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    unset_variable         go to state 643
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 343
    simple_variable        go to state 111
    static_member          go to state 112


State 561

  132 statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 644


State 562

  478 isset_variables: isset_variables ',' . isset_variable

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 344
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113
    isset_variable              go to state 645


State 563

  470 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 470 (internal_functions_in_yacc)


State 564

  471 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr ')' .

    $default  reduce using rule 471 (internal_functions_in_yacc)


State 565

   82 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 82 (top_statement)


State 566

  167 extends_from: "extends (T_EXTENDS)" . name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 646


State 567

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from . implements_list backup_doc_comment '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 647

    $default  reduce using rule 170 (implements_list)

    implements_list  go to state 648


State 568

  163 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 649


State 569

  169 interface_extends_list: "extends (T_EXTENDS)" . name_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 650
    name_list       go to state 651


State 570

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 652


State 571

  446 assignment_list_element: "list (T_LIST)" '(' . assignment_list ')'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 352
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 447 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 353
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list          go to state 653
    assignment_list_element  go to state 355


State 572

  443 assignment_list: assignment_list ',' . assignment_list_element

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 352
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 447 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 353
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list_element  go to state 654


State 573

  282 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' . '=' expr

    '='  shift, and go to state 655


State 574

  382 dereferencable_scalar: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 382 (dereferencable_scalar)


State 575

  467 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 467 (encaps_var_offset)


State 576

  469 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 469 (encaps_var_offset)


State 577

  468 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 468 (encaps_var_offset)


State 578

  461 encaps_var: "variable (T_VARIABLE)" '[' encaps_var_offset . ']'

    ']'  shift, and go to state 656


State 579

  462 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 462 (encaps_var)


State 580

  465 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 657
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 581

  464 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '}' .

    $default  reduce using rule 464 (encaps_var)


State 582

  463 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 463 (encaps_var)


State 583

  466 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 466 (encaps_var)


State 584

   85 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' . top_statement_list '}'

    $default  reduce using rule 71 (top_statement_list)

    top_statement_list  go to state 658


State 585

   70 top_statement_list: top_statement_list . top_statement
   87 top_statement: "namespace (T_NAMESPACE)" $@2 '{' top_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "const (T_CONST)"                             shift, and go to state 51
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "use (T_USE)"                                 shift, and go to state 55
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 659
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    top_statement                    go to state 85
    statement                        go to state 86
    function_declaration_statement   go to state 87
    class_declaration_statement      go to state 88
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 91
    interface_declaration_statement  go to state 92
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 586

  116 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 660


State 587

  427 simple_variable: '$' '{' expr '}' .

    $default  reduce using rule 427 (simple_variable)


State 588

  218 argument: "... (T_ELLIPSIS)" expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 218 (argument)


State 589

  216 non_empty_argument_list: non_empty_argument_list ',' . argument

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    "... (T_ELLIPSIS)"                            shift, and go to state 384
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    argument                    go to state 661
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 388
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 590

  214 argument_list: '(' non_empty_argument_list ')' .

    $default  reduce using rule 214 (argument_list)


State 591

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" . extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 566

    $default  reduce using rule 166 (extends_from)

    extends_from  go to state 662


State 592

  193 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' expr . ')' statement
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 663


State 593

  197 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr . ')' ':' inner_statement_list
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 664


State 594

  109 inner_statement_list: inner_statement_list . inner_statement
  199 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list . "endif (T_ENDIF)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "endif (T_ENDIF)"                             shift, and go to state 665
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 595

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' . parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 596
    "callable (T_CALLABLE)"    shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 201 (parameter_list)
    $default  reduce using rule 206 (optional_type)

    namespace_name            go to state 83
    name                      go to state 598
    parameter_list            go to state 666
    non_empty_parameter_list  go to state 600
    parameter                 go to state 601
    optional_type             go to state 602
    type                      go to state 603


State 596

  208 type: "array (T_ARRAY)" .

    $default  reduce using rule 208 (type)


State 597

  209 type: "callable (T_CALLABLE)" .

    $default  reduce using rule 209 (type)


State 598

  210 type: name .

    $default  reduce using rule 210 (type)


State 599

  355 expr_without_variable: function returns_ref '(' parameter_list . ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    ')'  shift, and go to state 667


State 600

  200 parameter_list: non_empty_parameter_list .
  203 non_empty_parameter_list: non_empty_parameter_list . ',' parameter

    ','  shift, and go to state 668

    $default  reduce using rule 200 (parameter_list)


State 601

  202 non_empty_parameter_list: parameter .

    $default  reduce using rule 202 (non_empty_parameter_list)


State 602

  204 parameter: optional_type . is_reference is_variadic "variable (T_VARIABLE)"
  205          | optional_type . is_reference is_variadic "variable (T_VARIABLE)" '=' expr

    '&'  shift, and go to state 669

    $default  reduce using rule 150 (is_reference)

    is_reference  go to state 670


State 603

  207 optional_type: type .

    $default  reduce using rule 207 (optional_type)


State 604

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  438 member_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    '}'                           shift, and go to state 671


State 605

  368 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list .

    $default  reduce using rule 368 (function_call)


State 606

  419 callable_variable: constant '[' optional_expr ']' .

    $default  reduce using rule 419 (callable_variable)


State 607

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  336                      | expr '?' ':' expr .
  337                      | expr . "?? (T_COALESCE)" expr

    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 336 (expr_without_variable)


State 608

  335 expr_without_variable: expr '?' expr ':' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 672
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 609

  369 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list .

    $default  reduce using rule 369 (function_call)


State 610

  418 callable_variable: dereferencable '[' optional_expr ']' .

    $default  reduce using rule 418 (callable_variable)


State 611

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  441 property_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    '}'                           shift, and go to state 673


State 612

  421 callable_variable: dereferencable "-> (T_OBJECT_OPERATOR)" property_name argument_list .

    $default  reduce using rule 421 (callable_variable)


State 613

  420 callable_variable: dereferencable '{' expr '}' .

    $default  reduce using rule 420 (callable_variable)


State 614

  284 expr_without_variable: variable '=' '&' variable .
  411 dereferencable: variable .

    '['                            reduce using rule 411 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 411 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 411 (dereferencable)
    '{'                            reduce using rule 411 (dereferencable)
    $default                       reduce using rule 284 (expr_without_variable)


State 615

  411 dereferencable: variable .
  454 array_pair: expr "=> (T_DOUBLE_ARROW)" '&' variable .

    ','       reduce using rule 454 (array_pair)
    ')'       reduce using rule 454 (array_pair)
    ']'       reduce using rule 454 (array_pair)
    $default  reduce using rule 411 (dereferencable)


State 616

  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from . implements_list backup_doc_comment '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 647

    $default  reduce using rule 170 (implements_list)

    implements_list  go to state 674


State 617

  432 new_variable: new_variable '[' optional_expr ']' .

    $default  reduce using rule 432 (new_variable)


State 618

  433 new_variable: new_variable '{' expr '}' .

    $default  reduce using rule 433 (new_variable)


State 619

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list . ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    ')'  shift, and go to state 675


State 620

  196 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' ':' . inner_statement_list

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 676


State 621

  192 if_stmt_without_else: "if (T_IF)" '(' expr ')' statement .

    $default  reduce using rule 192 (if_stmt_without_else)


State 622

  121 statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr . ')' ';'
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ')'                           shift, and go to state 677


State 623

  191 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 678


State 624

  190 while_statement: statement .

    $default  reduce using rule 190 (while_statement)


State 625

  120 statement: "while (T_WHILE)" '(' expr ')' while_statement .

    $default  reduce using rule 120 (statement)


State 626

  122 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs . ';' for_exprs ')' for_statement

    ';'  shift, and go to state 679


State 627

  276 non_empty_for_exprs: non_empty_for_exprs ',' expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 276 (non_empty_for_exprs)


State 628

  173 foreach_variable: '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 680
    simple_variable        go to state 111
    static_member          go to state 112


State 629

  174 foreach_variable: "list (T_LIST)" . '(' assignment_list ')'

    '('  shift, and go to state 681


State 630

  133 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable . ')' foreach_statement
  134          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable . "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 682
    ')'                    shift, and go to state 683


State 631

  172 foreach_variable: variable .
  411 dereferencable: variable .

    "=> (T_DOUBLE_ARROW)"  reduce using rule 172 (foreach_variable)
    ')'                    reduce using rule 172 (foreach_variable)
    $default               reduce using rule 411 (dereferencable)


State 632

  136 statement: "declare (T_DECLARE)" '(' const_list ')' $@3 . declare_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 684
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 685
    declare_statement           go to state 686
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 633

  183 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  184                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 687

    $default  reduce using rule 185 (case_list)

    case_list  go to state 688


State 634

  181 switch_case_list: '{' . case_list '}'
  182                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 689

    $default  reduce using rule 185 (case_list)

    case_list  go to state 690


State 635

  123 statement: "switch (T_SWITCH)" '(' expr ')' switch_case_list .

    $default  reduce using rule 123 (statement)


State 636

  138 statement: "try (T_TRY)" '{' inner_statement_list '}' catch_list . finally_statement
  143 catch_list: catch_list . "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "catch (T_CATCH)"      shift, and go to state 691
    "finally (T_FINALLY)"  shift, and go to state 692

    $default  reduce using rule 144 (finally_statement)

    finally_statement  go to state 693


State 637

  106 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 106 (use_declaration)


State 638

  100 inline_use_declaration: use_type . use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name   go to state 557
    use_declaration  go to state 694


State 639

   96 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations . '}'
   97 inline_use_declarations: inline_use_declarations . ',' inline_use_declaration

    ','  shift, and go to state 695
    '}'  shift, and go to state 696


State 640

   98 inline_use_declarations: inline_use_declaration .

    $default  reduce using rule 98 (inline_use_declarations)


State 641

   99 inline_use_declaration: use_declaration .

    $default  reduce using rule 99 (inline_use_declaration)


State 642

   95 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' . use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name    go to state 557
    use_declarations  go to state 697
    use_declaration   go to state 191


State 643

  147 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 147 (unset_variables)


State 644

  132 statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 132 (statement)


State 645

  478 isset_variables: isset_variables ',' isset_variable .

    $default  reduce using rule 478 (isset_variables)


State 646

  167 extends_from: "extends (T_EXTENDS)" name .

    $default  reduce using rule 167 (extends_from)


State 647

  171 implements_list: "implements (T_IMPLEMENTS)" . name_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 650
    name_list       go to state 698


State 648

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 699


State 649

  163 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 227 (class_statement_list)

    class_statement_list  go to state 700


State 650

  232 name_list: name .

    $default  reduce using rule 232 (name_list)


State 651

  169 interface_extends_list: "extends (T_EXTENDS)" name_list .
  233 name_list: name_list . ',' name

    ','  shift, and go to state 701

    $default  reduce using rule 169 (interface_extends_list)


State 652

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 702


State 653

  443 assignment_list: assignment_list . ',' assignment_list_element
  446 assignment_list_element: "list (T_LIST)" '(' assignment_list . ')'

    ','  shift, and go to state 572
    ')'  shift, and go to state 703


State 654

  443 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 443 (assignment_list)


State 655

  282 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 704
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 656

  461 encaps_var: "variable (T_VARIABLE)" '[' encaps_var_offset ']' .

    $default  reduce using rule 461 (encaps_var)


State 657

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr
  465 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ']'                           shift, and go to state 705


State 658

   70 top_statement_list: top_statement_list . top_statement
   85 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' top_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "const (T_CONST)"                             shift, and go to state 51
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "use (T_USE)"                                 shift, and go to state 55
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 706
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    top_statement                    go to state 85
    statement                        go to state 86
    function_declaration_statement   go to state 87
    class_declaration_statement      go to state 88
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 91
    interface_declaration_statement  go to state 92
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 659

   87 top_statement: "namespace (T_NAMESPACE)" $@2 '{' top_statement_list '}' .

    $default  reduce using rule 87 (top_statement)


State 660

  116 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 707


State 661

  216 non_empty_argument_list: non_empty_argument_list ',' argument .

    $default  reduce using rule 216 (non_empty_argument_list)


State 662

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from . implements_list backup_doc_comment '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 647

    $default  reduce using rule 170 (implements_list)

    implements_list  go to state 708


State 663

  193 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' . statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 709
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 664

  197 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' . ':' inner_statement_list

    ':'  shift, and go to state 710


State 665

  199 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 711


State 666

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list . ')' return_type backup_doc_comment '{' inner_statement_list '}'

    ')'  shift, and go to state 712


State 667

  355 expr_without_variable: function returns_ref '(' parameter_list ')' . lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 713

    $default  reduce using rule 361 (lexical_vars)

    lexical_vars  go to state 714


State 668

  203 non_empty_parameter_list: non_empty_parameter_list ',' . parameter

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 596
    "callable (T_CALLABLE)"    shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    $default  reduce using rule 206 (optional_type)

    namespace_name  go to state 83
    name            go to state 598
    parameter       go to state 715
    optional_type   go to state 602
    type            go to state 603


State 669

  151 is_reference: '&' .

    $default  reduce using rule 151 (is_reference)


State 670

  204 parameter: optional_type is_reference . is_variadic "variable (T_VARIABLE)"
  205          | optional_type is_reference . is_variadic "variable (T_VARIABLE)" '=' expr

    "... (T_ELLIPSIS)"  shift, and go to state 716

    $default  reduce using rule 152 (is_variadic)

    is_variadic  go to state 717


State 671

  438 member_name: '{' expr '}' .

    $default  reduce using rule 438 (member_name)


State 672

  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  335                      | expr '?' expr ':' expr .
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 335 (expr_without_variable)


State 673

  441 property_name: '{' expr '}' .

    $default  reduce using rule 441 (property_name)


State 674

  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 718


State 675

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' . lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 713

    $default  reduce using rule 361 (lexical_vars)

    lexical_vars  go to state 719


State 676

  109 inner_statement_list: inner_statement_list . inner_statement
  196 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' ':' inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 196 (alt_if_stmt_without_else)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 677

  121 statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' . ';'

    ';'  shift, and go to state 720


State 678

  109 inner_statement_list: inner_statement_list . inner_statement
  191 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "endwhile (T_ENDWHILE)"                       shift, and go to state 721
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 679

  122 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' . for_exprs ')' for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 274 (for_exprs)

    namespace_name              go to state 83
    name                        go to state 84
    for_exprs                   go to state 722
    non_empty_for_exprs         go to state 316
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 317
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 680

  173 foreach_variable: '&' variable .
  411 dereferencable: variable .

    "=> (T_DOUBLE_ARROW)"  reduce using rule 173 (foreach_variable)
    ')'                    reduce using rule 173 (foreach_variable)
    $default               reduce using rule 411 (dereferencable)


State 681

  174 foreach_variable: "list (T_LIST)" '(' . assignment_list ')'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 352
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 447 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 353
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list          go to state 723
    assignment_list_element  go to state 355


State 682

  134 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" . foreach_variable ')' foreach_statement

    '&'                                           shift, and go to state 628
    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 629
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    foreach_variable       go to state 724
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 631
    simple_variable        go to state 111
    static_member          go to state 112


State 683

  133 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable ')' . foreach_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 725
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 726
    foreach_statement           go to state 727
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 684

  180 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 728


State 685

  179 declare_statement: statement .

    $default  reduce using rule 179 (declare_statement)


State 686

  136 statement: "declare (T_DECLARE)" '(' const_list ')' $@3 declare_statement .

    $default  reduce using rule 136 (statement)


State 687

  184 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 185 (case_list)

    case_list  go to state 729


State 688

  183 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  186 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  187          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 730
    "case (T_CASE)"            shift, and go to state 731
    "default (T_DEFAULT)"      shift, and go to state 732


State 689

  182 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 185 (case_list)

    case_list  go to state 733


State 690

  181 switch_case_list: '{' case_list . '}'
  186 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  187          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "case (T_CASE)"        shift, and go to state 731
    "default (T_DEFAULT)"  shift, and go to state 732
    '}'                    shift, and go to state 734


State 691

  143 catch_list: catch_list "catch (T_CATCH)" . '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    '('  shift, and go to state 735


State 692

  145 finally_statement: "finally (T_FINALLY)" . '{' inner_statement_list '}'

    '{'  shift, and go to state 736


State 693

  138 statement: "try (T_TRY)" '{' inner_statement_list '}' catch_list finally_statement .

    $default  reduce using rule 138 (statement)


State 694

  100 inline_use_declaration: use_type use_declaration .

    $default  reduce using rule 100 (inline_use_declaration)


State 695

   97 inline_use_declarations: inline_use_declarations ',' . inline_use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "function (T_FUNCTION)"  shift, and go to state 184
    "const (T_CONST)"        shift, and go to state 185
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name          go to state 557
    use_type                go to state 638
    inline_use_declaration  go to state 737
    use_declaration         go to state 641


State 696

   96 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}' .

    $default  reduce using rule 96 (mixed_group_use_declaration)


State 697

   95 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' use_declarations . '}'
  101 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 337
    '}'  shift, and go to state 738


State 698

  171 implements_list: "implements (T_IMPLEMENTS)" name_list .
  233 name_list: name_list . ',' name

    ','  shift, and go to state 701

    $default  reduce using rule 171 (implements_list)


State 699

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 739


State 700

  163 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list . '}'
  226 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 740
    "abstract (T_ABSTRACT)"    shift, and go to state 741
    "final (T_FINAL)"          shift, and go to state 742
    "private (T_PRIVATE)"      shift, and go to state 743
    "protected (T_PROTECTED)"  shift, and go to state 744
    "public (T_PUBLIC)"        shift, and go to state 745
    "const (T_CONST)"          shift, and go to state 746
    "use (T_USE)"              shift, and go to state 747
    "var (T_VAR)"              shift, and go to state 748
    '}'                        shift, and go to state 749

    $default  reduce using rule 253 (method_modifiers)

    class_statement             go to state 750
    variable_modifiers          go to state 751
    method_modifiers            go to state 752
    non_empty_member_modifiers  go to state 753
    member_modifier             go to state 754


State 701

  233 name_list: name_list ',' . name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 755


State 702

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 227 (class_statement_list)

    class_statement_list  go to state 756


State 703

  446 assignment_list_element: "list (T_LIST)" '(' assignment_list ')' .

    $default  reduce using rule 446 (assignment_list_element)


State 704

  282 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' expr .
  302                      | expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 282 (expr_without_variable)


State 705

  465 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 757


State 706

   85 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' top_statement_list '}' .

    $default  reduce using rule 85 (top_statement)


State 707

  116 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 116 (inner_statement)


State 708

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 758


State 709

  193 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' statement .

    $default  reduce using rule 193 (if_stmt_without_else)


State 710

  197 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' ':' . inner_statement_list

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 759


State 711

  199 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" ';' .

    $default  reduce using rule 199 (alt_if_stmt)


State 712

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' . return_type backup_doc_comment '{' inner_statement_list '}'

    ':'  shift, and go to state 760

    $default  reduce using rule 211 (return_type)

    return_type  go to state 761


State 713

  362 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 762


State 714

  355 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars . return_type backup_doc_comment '{' inner_statement_list '}'

    ':'  shift, and go to state 760

    $default  reduce using rule 211 (return_type)

    return_type  go to state 763


State 715

  203 non_empty_parameter_list: non_empty_parameter_list ',' parameter .

    $default  reduce using rule 203 (non_empty_parameter_list)


State 716

  153 is_variadic: "... (T_ELLIPSIS)" .

    $default  reduce using rule 153 (is_variadic)


State 717

  204 parameter: optional_type is_reference is_variadic . "variable (T_VARIABLE)"
  205          | optional_type is_reference is_variadic . "variable (T_VARIABLE)" '=' expr

    "variable (T_VARIABLE)"  shift, and go to state 764


State 718

  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 765


State 719

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars . return_type backup_doc_comment '{' inner_statement_list '}'

    ':'  shift, and go to state 760

    $default  reduce using rule 211 (return_type)

    return_type  go to state 766


State 720

  121 statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' ';' .

    $default  reduce using rule 121 (statement)


State 721

  191 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 767


State 722

  122 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs . ')' for_statement

    ')'  shift, and go to state 768


State 723

  174 foreach_variable: "list (T_LIST)" '(' assignment_list . ')'
  443 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 572
    ')'  shift, and go to state 769


State 724

  134 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable . ')' foreach_statement

    ')'  shift, and go to state 770


State 725

  178 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 771


State 726

  177 foreach_statement: statement .

    $default  reduce using rule 177 (foreach_statement)


State 727

  133 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable ')' foreach_statement .

    $default  reduce using rule 133 (statement)


State 728

  109 inner_statement_list: inner_statement_list . inner_statement
  180 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "enddeclare (T_ENDDECLARE)"                   shift, and go to state 772
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 729

  184 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  186 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  187          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 773
    "case (T_CASE)"            shift, and go to state 731
    "default (T_DEFAULT)"      shift, and go to state 732


State 730

  183 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 774


State 731

  186 case_list: case_list "case (T_CASE)" . expr case_separator inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 775
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 732

  187 case_list: case_list "default (T_DEFAULT)" . case_separator inner_statement_list

    ':'  shift, and go to state 776
    ';'  shift, and go to state 777

    case_separator  go to state 778


State 733

  182 switch_case_list: '{' ';' case_list . '}'
  186 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  187          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "case (T_CASE)"        shift, and go to state 731
    "default (T_DEFAULT)"  shift, and go to state 732
    '}'                    shift, and go to state 779


State 734

  181 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 181 (switch_case_list)


State 735

  143 catch_list: catch_list "catch (T_CATCH)" '(' . name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 780


State 736

  145 finally_statement: "finally (T_FINALLY)" '{' . inner_statement_list '}'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 781


State 737

   97 inline_use_declarations: inline_use_declarations ',' inline_use_declaration .

    $default  reduce using rule 97 (inline_use_declarations)


State 738

   95 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' use_declarations '}' .

    $default  reduce using rule 95 (group_use_declaration)


State 739

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 227 (class_statement_list)

    class_statement_list  go to state 782


State 740

  260 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 260 (member_modifier)


State 741

  261 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 261 (member_modifier)


State 742

  262 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 262 (member_modifier)


State 743

  259 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 259 (member_modifier)


State 744

  258 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 258 (member_modifier)


State 745

  257 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 257 (member_modifier)


State 746

  229 class_statement: "const (T_CONST)" . class_const_list ';'

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 419
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462

    reserved_non_modifiers  go to state 464
    semi_reserved           go to state 465
    identifier              go to state 783
    class_const_list        go to state 784
    class_const_decl        go to state 785


State 747

  230 class_statement: "use (T_USE)" . name_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 650
    name_list       go to state 786


State 748

  252 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 252 (variable_modifiers)


State 749

  163 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 163 (trait_declaration_statement)


State 750

  226 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 226 (class_statement_list)


State 751

  228 class_statement: variable_modifiers . property_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 787

    property_list  go to state 788
    property       go to state 789


State 752

  231 class_statement: method_modifiers . function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body

    "function (T_FUNCTION)"  shift, and go to state 50

    function  go to state 790


State 753

  251 variable_modifiers: non_empty_member_modifiers .
  254 method_modifiers: non_empty_member_modifiers .
  256 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "static (T_STATIC)"        shift, and go to state 740
    "abstract (T_ABSTRACT)"    shift, and go to state 741
    "final (T_FINAL)"          shift, and go to state 742
    "private (T_PRIVATE)"      shift, and go to state 743
    "protected (T_PROTECTED)"  shift, and go to state 744
    "public (T_PUBLIC)"        shift, and go to state 745

    "function (T_FUNCTION)"  reduce using rule 254 (method_modifiers)
    $default                 reduce using rule 251 (variable_modifiers)

    member_modifier  go to state 791


State 754

  255 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 255 (non_empty_member_modifiers)


State 755

  233 name_list: name_list ',' name .

    $default  reduce using rule 233 (name_list)


State 756

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list . '}'
  226 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 740
    "abstract (T_ABSTRACT)"    shift, and go to state 741
    "final (T_FINAL)"          shift, and go to state 742
    "private (T_PRIVATE)"      shift, and go to state 743
    "protected (T_PROTECTED)"  shift, and go to state 744
    "public (T_PUBLIC)"        shift, and go to state 745
    "const (T_CONST)"          shift, and go to state 746
    "use (T_USE)"              shift, and go to state 747
    "var (T_VAR)"              shift, and go to state 748
    '}'                        shift, and go to state 792

    $default  reduce using rule 253 (method_modifiers)

    class_statement             go to state 750
    variable_modifiers          go to state 751
    method_modifiers            go to state 752
    non_empty_member_modifiers  go to state 753
    member_modifier             go to state 754


State 757

  465 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 465 (encaps_var)


State 758

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 793


State 759

  109 inner_statement_list: inner_statement_list . inner_statement
  197 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 197 (alt_if_stmt_without_else)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 760

  212 return_type: ':' . type

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 596
    "callable (T_CALLABLE)"    shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 598
    type            go to state 794


State 761

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type . backup_doc_comment '{' inner_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 795


State 762

  362 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 796
    "variable (T_VARIABLE)"  shift, and go to state 797

    lexical_var_list  go to state 798
    lexical_var       go to state 799


State 763

  355 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type . backup_doc_comment '{' inner_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 800


State 764

  204 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)" .
  205          | optional_type is_reference is_variadic "variable (T_VARIABLE)" . '=' expr

    '='  shift, and go to state 801

    $default  reduce using rule 204 (parameter)


State 765

  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 227 (class_statement_list)

    class_statement_list  go to state 802


State 766

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type . backup_doc_comment '{' inner_statement_list '}'

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 803


State 767

  191 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 191 (while_statement)


State 768

  122 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs ')' . for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 804
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 805
    for_statement               go to state 806
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 769

  174 foreach_variable: "list (T_LIST)" '(' assignment_list ')' .

    $default  reduce using rule 174 (foreach_variable)


State 770

  134 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' . foreach_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 725
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 726
    foreach_statement           go to state 807
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 771

  109 inner_statement_list: inner_statement_list . inner_statement
  178 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "endforeach (T_ENDFOREACH)"                   shift, and go to state 808
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 772

  180 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 809


State 773

  184 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 810


State 774

  183 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 183 (switch_case_list)


State 775

  186 case_list: case_list "case (T_CASE)" expr . case_separator inner_statement_list
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    ':'                           shift, and go to state 776
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266
    ';'                           shift, and go to state 777

    case_separator  go to state 811


State 776

  188 case_separator: ':' .

    $default  reduce using rule 188 (case_separator)


State 777

  189 case_separator: ';' .

    $default  reduce using rule 189 (case_separator)


State 778

  187 case_list: case_list "default (T_DEFAULT)" case_separator . inner_statement_list

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 812


State 779

  182 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 182 (switch_case_list)


State 780

  143 catch_list: catch_list "catch (T_CATCH)" '(' name . "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 813


State 781

  109 inner_statement_list: inner_statement_list . inner_statement
  145 finally_statement: "finally (T_FINALLY)" '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 814
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 782

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list . '}'
  226 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 740
    "abstract (T_ABSTRACT)"    shift, and go to state 741
    "final (T_FINAL)"          shift, and go to state 742
    "private (T_PRIVATE)"      shift, and go to state 743
    "protected (T_PROTECTED)"  shift, and go to state 744
    "public (T_PUBLIC)"        shift, and go to state 745
    "const (T_CONST)"          shift, and go to state 746
    "use (T_USE)"              shift, and go to state 747
    "var (T_VAR)"              shift, and go to state 748
    '}'                        shift, and go to state 815

    $default  reduce using rule 253 (method_modifiers)

    class_statement             go to state 750
    variable_modifiers          go to state 751
    method_modifiers            go to state 752
    non_empty_member_modifiers  go to state 753
    member_modifier             go to state 754


State 783

  269 class_const_decl: identifier . '=' expr

    '='  shift, and go to state 816


State 784

  229 class_statement: "const (T_CONST)" class_const_list . ';'
  267 class_const_list: class_const_list . ',' class_const_decl

    ','  shift, and go to state 817
    ';'  shift, and go to state 818


State 785

  268 class_const_list: class_const_decl .

    $default  reduce using rule 268 (class_const_list)


State 786

  230 class_statement: "use (T_USE)" name_list . trait_adaptations
  233 name_list: name_list . ',' name

    ','  shift, and go to state 701
    ';'  shift, and go to state 819
    '{'  shift, and go to state 820

    trait_adaptations  go to state 821


State 787

  265 property: "variable (T_VARIABLE)" .
  266         | "variable (T_VARIABLE)" . '=' expr

    '='  shift, and go to state 822

    $default  reduce using rule 265 (property)


State 788

  228 class_statement: variable_modifiers property_list . ';'
  263 property_list: property_list . ',' property

    ','  shift, and go to state 823
    ';'  shift, and go to state 824


State 789

  264 property_list: property .

    $default  reduce using rule 264 (property_list)


State 790

  231 class_statement: method_modifiers function . returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body

    '&'  shift, and go to state 234

    $default  reduce using rule 359 (returns_ref)

    returns_ref  go to state 825


State 791

  256 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 256 (non_empty_member_modifiers)


State 792

  165 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 165 (interface_declaration_statement)


State 793

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 227 (class_statement_list)

    class_statement_list  go to state 826


State 794

  212 return_type: ':' type .

    $default  reduce using rule 212 (return_type)


State 795

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment . '{' inner_statement_list '}'

    '{'  shift, and go to state 827


State 796

  366 lexical_var: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 828


State 797

  365 lexical_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 365 (lexical_var)


State 798

  362 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  363 lexical_var_list: lexical_var_list . ',' lexical_var

    ','  shift, and go to state 829
    ')'  shift, and go to state 830


State 799

  364 lexical_var_list: lexical_var .

    $default  reduce using rule 364 (lexical_var_list)


State 800

  355 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment . '{' inner_statement_list '}'

    '{'  shift, and go to state 831


State 801

  205 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)" '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 832
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 802

  226 class_statement_list: class_statement_list . class_statement
  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list . '}'

    "static (T_STATIC)"        shift, and go to state 740
    "abstract (T_ABSTRACT)"    shift, and go to state 741
    "final (T_FINAL)"          shift, and go to state 742
    "private (T_PRIVATE)"      shift, and go to state 743
    "protected (T_PROTECTED)"  shift, and go to state 744
    "public (T_PUBLIC)"        shift, and go to state 745
    "const (T_CONST)"          shift, and go to state 746
    "use (T_USE)"              shift, and go to state 747
    "var (T_VAR)"              shift, and go to state 748
    '}'                        shift, and go to state 833

    $default  reduce using rule 253 (method_modifiers)

    class_statement             go to state 750
    variable_modifiers          go to state 751
    method_modifiers            go to state 752
    non_empty_member_modifiers  go to state 753
    member_modifier             go to state 754


State 803

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment . '{' inner_statement_list '}'

    '{'  shift, and go to state 834


State 804

  176 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 835


State 805

  175 for_statement: statement .

    $default  reduce using rule 175 (for_statement)


State 806

  122 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement .

    $default  reduce using rule 122 (statement)


State 807

  134 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement .

    $default  reduce using rule 134 (statement)


State 808

  178 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 836


State 809

  180 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 180 (declare_statement)


State 810

  184 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 184 (switch_case_list)


State 811

  186 case_list: case_list "case (T_CASE)" expr case_separator . inner_statement_list

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 837


State 812

  109 inner_statement_list: inner_statement_list . inner_statement
  187 case_list: case_list "default (T_DEFAULT)" case_separator inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 187 (case_list)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 813

  143 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 838


State 814

  145 finally_statement: "finally (T_FINALLY)" '{' inner_statement_list '}' .

    $default  reduce using rule 145 (finally_statement)


State 815

  157 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 157 (class_declaration_statement)


State 816

  269 class_const_decl: identifier '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 839
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 817

  267 class_const_list: class_const_list ',' . class_const_decl

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 419
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462

    reserved_non_modifiers  go to state 464
    semi_reserved           go to state 465
    identifier              go to state 783
    class_const_decl        go to state 840


State 818

  229 class_statement: "const (T_CONST)" class_const_list ';' .

    $default  reduce using rule 229 (class_statement)


State 819

  234 trait_adaptations: ';' .

    $default  reduce using rule 234 (trait_adaptations)


State 820

  235 trait_adaptations: '{' . '}'
  236                  | '{' . trait_adaptation_list '}'

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 841
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 842
    "\\ (T_NS_SEPARATOR)"            shift, and go to state 76
    '}'                              shift, and go to state 843

    reserved_non_modifiers           go to state 464
    semi_reserved                    go to state 465
    identifier                       go to state 844
    namespace_name                   go to state 83
    name                             go to state 845
    trait_adaptation_list            go to state 846
    trait_adaptation                 go to state 847
    trait_precedence                 go to state 848
    trait_alias                      go to state 849
    trait_method_reference           go to state 850
    absolute_trait_method_reference  go to state 851


State 821

  230 class_statement: "use (T_USE)" name_list trait_adaptations .

    $default  reduce using rule 230 (class_statement)


State 822

  266 property: "variable (T_VARIABLE)" '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 852
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 823

  263 property_list: property_list ',' . property

    "variable (T_VARIABLE)"  shift, and go to state 787

    property  go to state 853


State 824

  228 class_statement: variable_modifiers property_list ';' .

    $default  reduce using rule 228 (class_statement)


State 825

  231 class_statement: method_modifiers function returns_ref . identifier '(' parameter_list ')' return_type backup_doc_comment method_body

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 419
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462

    reserved_non_modifiers  go to state 464
    semi_reserved           go to state 465
    identifier              go to state 854


State 826

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list . '}'
  226 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 740
    "abstract (T_ABSTRACT)"    shift, and go to state 741
    "final (T_FINAL)"          shift, and go to state 742
    "private (T_PRIVATE)"      shift, and go to state 743
    "protected (T_PROTECTED)"  shift, and go to state 744
    "public (T_PUBLIC)"        shift, and go to state 745
    "const (T_CONST)"          shift, and go to state 746
    "use (T_USE)"              shift, and go to state 747
    "var (T_VAR)"              shift, and go to state 748
    '}'                        shift, and go to state 855

    $default  reduce using rule 253 (method_modifiers)

    class_statement             go to state 750
    variable_modifiers          go to state 751
    method_modifiers            go to state 752
    non_empty_member_modifiers  go to state 753
    member_modifier             go to state 754


State 827

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' . inner_statement_list '}'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 856


State 828

  366 lexical_var: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 366 (lexical_var)


State 829

  363 lexical_var_list: lexical_var_list ',' . lexical_var

    '&'                      shift, and go to state 796
    "variable (T_VARIABLE)"  shift, and go to state 797

    lexical_var  go to state 857


State 830

  362 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 362 (lexical_vars)


State 831

  355 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' . inner_statement_list '}'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 858


State 832

  205 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)" '=' expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 205 (parameter)


State 833

  279 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 279 (anonymous_class)


State 834

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' . inner_statement_list '}'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 859


State 835

  109 inner_statement_list: inner_statement_list . inner_statement
  176 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "endfor (T_ENDFOR)"                           shift, and go to state 860
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 836

  178 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 178 (foreach_statement)


State 837

  109 inner_statement_list: inner_statement_list . inner_statement
  186 case_list: case_list "case (T_CASE)" expr case_separator inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 186 (case_list)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 838

  143 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 861


State 839

  269 class_const_decl: identifier '=' expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 269 (class_const_decl)


State 840

  267 class_const_list: class_const_list ',' class_const_decl .

    $default  reduce using rule 267 (class_const_list)


State 841

   68 identifier: "identifier (T_STRING)" .
   72 namespace_name: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 68 (identifier)
    $default     reduce using rule 72 (namespace_name)


State 842

   57 reserved_non_modifiers: "namespace (T_NAMESPACE)" .
   75 name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 211

    $default  reduce using rule 57 (reserved_non_modifiers)


State 843

  235 trait_adaptations: '{' '}' .

    $default  reduce using rule 235 (trait_adaptations)


State 844

  246 trait_method_reference: identifier .

    $default  reduce using rule 246 (trait_method_reference)


State 845

  248 absolute_trait_method_reference: name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 862


State 846

  236 trait_adaptations: '{' trait_adaptation_list . '}'
  238 trait_adaptation_list: trait_adaptation_list . trait_adaptation

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 841
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 842
    "\\ (T_NS_SEPARATOR)"            shift, and go to state 76
    '}'                              shift, and go to state 863

    reserved_non_modifiers           go to state 464
    semi_reserved                    go to state 465
    identifier                       go to state 844
    namespace_name                   go to state 83
    name                             go to state 845
    trait_adaptation                 go to state 864
    trait_precedence                 go to state 848
    trait_alias                      go to state 849
    trait_method_reference           go to state 850
    absolute_trait_method_reference  go to state 851


State 847

  237 trait_adaptation_list: trait_adaptation .

    $default  reduce using rule 237 (trait_adaptation_list)


State 848

  239 trait_adaptation: trait_precedence . ';'

    ';'  shift, and go to state 865


State 849

  240 trait_adaptation: trait_alias . ';'

    ';'  shift, and go to state 866


State 850

  242 trait_alias: trait_method_reference . "as (T_AS)" "identifier (T_STRING)"
  243            | trait_method_reference . "as (T_AS)" reserved_non_modifiers
  244            | trait_method_reference . "as (T_AS)" member_modifier identifier
  245            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 867


State 851

  241 trait_precedence: absolute_trait_method_reference . "insteadof (T_INSTEADOF)" name_list
  247 trait_method_reference: absolute_trait_method_reference .

    "insteadof (T_INSTEADOF)"  shift, and go to state 868

    $default  reduce using rule 247 (trait_method_reference)


State 852

  266 property: "variable (T_VARIABLE)" '=' expr .
  302 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  303                      | expr . "&& (T_BOOLEAN_AND)" expr
  304                      | expr . "or (T_LOGICAL_OR)" expr
  305                      | expr . "and (T_LOGICAL_AND)" expr
  306                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr . '|' expr
  308                      | expr . '&' expr
  309                      | expr . '^' expr
  310                      | expr . '.' expr
  311                      | expr . '+' expr
  312                      | expr . '-' expr
  313                      | expr . '*' expr
  314                      | expr . "** (T_POW)" expr
  315                      | expr . '/' expr
  316                      | expr . '%' expr
  317                      | expr . "<< (T_SL)" expr
  318                      | expr . ">> (T_SR)" expr
  323                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr . '<' expr
  328                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr . '>' expr
  330                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr . "<=> (T_SPACESHIP)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  335                      | expr . '?' expr ':' expr
  336                      | expr . '?' ':' expr
  337                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 238
    "xor (T_LOGICAL_XOR)"         shift, and go to state 239
    "and (T_LOGICAL_AND)"         shift, and go to state 240
    '?'                           shift, and go to state 241
    "?? (T_COALESCE)"             shift, and go to state 242
    "|| (T_BOOLEAN_OR)"           shift, and go to state 243
    "&& (T_BOOLEAN_AND)"          shift, and go to state 244
    '|'                           shift, and go to state 245
    '^'                           shift, and go to state 246
    '&'                           shift, and go to state 247
    "== (T_IS_EQUAL)"             shift, and go to state 248
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 249
    "=== (T_IS_IDENTICAL)"        shift, and go to state 250
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 251
    "<=> (T_SPACESHIP)"           shift, and go to state 252
    '<'                           shift, and go to state 253
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 254
    '>'                           shift, and go to state 255
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 256
    "<< (T_SL)"                   shift, and go to state 257
    ">> (T_SR)"                   shift, and go to state 258
    '+'                           shift, and go to state 259
    '-'                           shift, and go to state 260
    '.'                           shift, and go to state 261
    '*'                           shift, and go to state 262
    '/'                           shift, and go to state 263
    '%'                           shift, and go to state 264
    "instanceof (T_INSTANCEOF)"   shift, and go to state 265
    "** (T_POW)"                  shift, and go to state 266

    $default  reduce using rule 266 (property)


State 853

  263 property_list: property_list ',' property .

    $default  reduce using rule 263 (property_list)


State 854

  231 class_statement: method_modifiers function returns_ref identifier . '(' parameter_list ')' return_type backup_doc_comment method_body

    '('  shift, and go to state 869


State 855

  155 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 155 (class_declaration_statement)


State 856

  109 inner_statement_list: inner_statement_list . inner_statement
  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 870
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 857

  363 lexical_var_list: lexical_var_list ',' lexical_var .

    $default  reduce using rule 363 (lexical_var_list)


State 858

  109 inner_statement_list: inner_statement_list . inner_statement
  355 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 871
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 859

  109 inner_statement_list: inner_statement_list . inner_statement
  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 872
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 860

  176 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 873


State 861

  143 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' . inner_statement_list '}'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 874


State 862

  248 absolute_trait_method_reference: name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . identifier

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 419
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462

    reserved_non_modifiers  go to state 464
    semi_reserved           go to state 465
    identifier              go to state 875


State 863

  236 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 236 (trait_adaptations)


State 864

  238 trait_adaptation_list: trait_adaptation_list trait_adaptation .

    $default  reduce using rule 238 (trait_adaptation_list)


State 865

  239 trait_adaptation: trait_precedence ';' .

    $default  reduce using rule 239 (trait_adaptation)


State 866

  240 trait_adaptation: trait_alias ';' .

    $default  reduce using rule 240 (trait_adaptation)


State 867

  242 trait_alias: trait_method_reference "as (T_AS)" . "identifier (T_STRING)"
  243            | trait_method_reference "as (T_AS)" . reserved_non_modifiers
  244            | trait_method_reference "as (T_AS)" . member_modifier identifier
  245            | trait_method_reference "as (T_AS)" . member_modifier

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 740
    "abstract (T_ABSTRACT)"          shift, and go to state 741
    "final (T_FINAL)"                shift, and go to state 742
    "private (T_PRIVATE)"            shift, and go to state 743
    "protected (T_PROTECTED)"        shift, and go to state 744
    "public (T_PUBLIC)"              shift, and go to state 745
    "identifier (T_STRING)"          shift, and go to state 876
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462

    reserved_non_modifiers  go to state 877
    member_modifier         go to state 878


State 868

  241 trait_precedence: absolute_trait_method_reference "insteadof (T_INSTEADOF)" . name_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 650
    name_list       go to state 879


State 869

  231 class_statement: method_modifiers function returns_ref identifier '(' . parameter_list ')' return_type backup_doc_comment method_body

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 596
    "callable (T_CALLABLE)"    shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 201 (parameter_list)
    $default  reduce using rule 206 (optional_type)

    namespace_name            go to state 83
    name                      go to state 598
    parameter_list            go to state 880
    non_empty_parameter_list  go to state 600
    parameter                 go to state 601
    optional_type             go to state 602
    type                      go to state 603


State 870

  149 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}' .

    $default  reduce using rule 149 (function_declaration_statement)


State 871

  355 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}' .

    $default  reduce using rule 355 (expr_without_variable)


State 872

  356 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}' .

    $default  reduce using rule 356 (expr_without_variable)


State 873

  176 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 176 (for_statement)


State 874

  109 inner_statement_list: inner_statement_list . inner_statement
  143 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 881
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 875

  248 absolute_trait_method_reference: name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier .

    $default  reduce using rule 248 (absolute_trait_method_reference)


State 876

  242 trait_alias: trait_method_reference "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 242 (trait_alias)


State 877

  243 trait_alias: trait_method_reference "as (T_AS)" reserved_non_modifiers .

    $default  reduce using rule 243 (trait_alias)


State 878

  244 trait_alias: trait_method_reference "as (T_AS)" member_modifier . identifier
  245            | trait_method_reference "as (T_AS)" member_modifier .

    "include (T_INCLUDE)"            shift, and go to state 397
    "include_once (T_INCLUDE_ONCE)"  shift, and go to state 398
    "eval (T_EVAL)"                  shift, and go to state 399
    "require (T_REQUIRE)"            shift, and go to state 400
    "require_once (T_REQUIRE_ONCE)"  shift, and go to state 401
    "or (T_LOGICAL_OR)"              shift, and go to state 402
    "xor (T_LOGICAL_XOR)"            shift, and go to state 403
    "and (T_LOGICAL_AND)"            shift, and go to state 404
    "print (T_PRINT)"                shift, and go to state 405
    "yield (T_YIELD)"                shift, and go to state 406
    "instanceof (T_INSTANCEOF)"      shift, and go to state 407
    "new (T_NEW)"                    shift, and go to state 408
    "clone (T_CLONE)"                shift, and go to state 409
    "elseif (T_ELSEIF)"              shift, and go to state 410
    "else (T_ELSE)"                  shift, and go to state 411
    "endif (T_ENDIF)"                shift, and go to state 412
    "static (T_STATIC)"              shift, and go to state 413
    "abstract (T_ABSTRACT)"          shift, and go to state 414
    "final (T_FINAL)"                shift, and go to state 415
    "private (T_PRIVATE)"            shift, and go to state 416
    "protected (T_PROTECTED)"        shift, and go to state 417
    "public (T_PUBLIC)"              shift, and go to state 418
    "identifier (T_STRING)"          shift, and go to state 419
    "exit (T_EXIT)"                  shift, and go to state 420
    "if (T_IF)"                      shift, and go to state 421
    "echo (T_ECHO)"                  shift, and go to state 422
    "do (T_DO)"                      shift, and go to state 423
    "while (T_WHILE)"                shift, and go to state 424
    "endwhile (T_ENDWHILE)"          shift, and go to state 425
    "for (T_FOR)"                    shift, and go to state 426
    "endfor (T_ENDFOR)"              shift, and go to state 427
    "foreach (T_FOREACH)"            shift, and go to state 428
    "endforeach (T_ENDFOREACH)"      shift, and go to state 429
    "declare (T_DECLARE)"            shift, and go to state 430
    "enddeclare (T_ENDDECLARE)"      shift, and go to state 431
    "as (T_AS)"                      shift, and go to state 432
    "switch (T_SWITCH)"              shift, and go to state 433
    "endswitch (T_ENDSWITCH)"        shift, and go to state 434
    "case (T_CASE)"                  shift, and go to state 435
    "default (T_DEFAULT)"            shift, and go to state 436
    "break (T_BREAK)"                shift, and go to state 437
    "continue (T_CONTINUE)"          shift, and go to state 438
    "goto (T_GOTO)"                  shift, and go to state 439
    "function (T_FUNCTION)"          shift, and go to state 440
    "const (T_CONST)"                shift, and go to state 441
    "return (T_RETURN)"              shift, and go to state 442
    "try (T_TRY)"                    shift, and go to state 443
    "catch (T_CATCH)"                shift, and go to state 444
    "finally (T_FINALLY)"            shift, and go to state 445
    "throw (T_THROW)"                shift, and go to state 446
    "use (T_USE)"                    shift, and go to state 447
    "insteadof (T_INSTEADOF)"        shift, and go to state 448
    "global (T_GLOBAL)"              shift, and go to state 449
    "var (T_VAR)"                    shift, and go to state 450
    "unset (T_UNSET)"                shift, and go to state 451
    "isset (T_ISSET)"                shift, and go to state 452
    "empty (T_EMPTY)"                shift, and go to state 453
    "class (T_CLASS)"                shift, and go to state 454
    "trait (T_TRAIT)"                shift, and go to state 455
    "interface (T_INTERFACE)"        shift, and go to state 456
    "extends (T_EXTENDS)"            shift, and go to state 457
    "implements (T_IMPLEMENTS)"      shift, and go to state 458
    "list (T_LIST)"                  shift, and go to state 459
    "array (T_ARRAY)"                shift, and go to state 460
    "callable (T_CALLABLE)"          shift, and go to state 461
    "namespace (T_NAMESPACE)"        shift, and go to state 462

    $default  reduce using rule 245 (trait_alias)

    reserved_non_modifiers  go to state 464
    semi_reserved           go to state 465
    identifier              go to state 882


State 879

  233 name_list: name_list . ',' name
  241 trait_precedence: absolute_trait_method_reference "insteadof (T_INSTEADOF)" name_list .

    ','  shift, and go to state 701

    $default  reduce using rule 241 (trait_precedence)


State 880

  231 class_statement: method_modifiers function returns_ref identifier '(' parameter_list . ')' return_type backup_doc_comment method_body

    ')'  shift, and go to state 883


State 881

  143 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' .

    $default  reduce using rule 143 (catch_list)


State 882

  244 trait_alias: trait_method_reference "as (T_AS)" member_modifier identifier .

    $default  reduce using rule 244 (trait_alias)


State 883

  231 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' . return_type backup_doc_comment method_body

    ':'  shift, and go to state 760

    $default  reduce using rule 211 (return_type)

    return_type  go to state 884


State 884

  231 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' return_type . backup_doc_comment method_body

    $default  reduce using rule 358 (backup_doc_comment)

    backup_doc_comment  go to state 885


State 885

  231 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment . method_body

    ';'  shift, and go to state 886
    '{'  shift, and go to state 887

    method_body  go to state 888


State 886

  249 method_body: ';' .

    $default  reduce using rule 249 (method_body)


State 887

  250 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 110 (inner_statement_list)

    inner_statement_list  go to state 889


State 888

  231 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body .

    $default  reduce using rule 231 (class_statement)


State 889

  109 inner_statement_list: inner_statement_list . inner_statement
  250 method_body: '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 372
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 890
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 374
    statement                        go to state 375
    function_declaration_statement   go to state 376
    class_declaration_statement      go to state 377
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 378
    interface_declaration_statement  go to state 379
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 890

  250 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 250 (method_body)
